<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="cachebenchfwk" default="help" basedir=".">


   <property file="build.properties"/>
   <!-- Uncomment the following property if no tests compilation is needed -->
   <!--
  <property name="skip.tests" value="true"/>
   -->

   <!-- Compiler options -->

   <property name="compiler.debug" value="on"/>
   <property name="compiler.generate.no.warnings" value="off"/>

   <property environment="env"/>

   <property name="framework.output.dir" value="./classes/production/Framework"/>
   <condition property="coherence.jars.present">
      <and>
         <available file="cache-products/coherence-3.3.1/lib/coherence.jar"/>
         <available file="cache-products/coherence-3.3.1/lib/tangosol.jar"/>
      </and>
   </condition>


   <path id="framework.module.classpath">
      <fileset dir="./lib" includes="**/*.jar"/>
      <pathelement location="./conf"/>
   </path>


   <target name="help" description="Dumps usage information">
      <echo>
         This script has the purpose of building the CacheBenchFwk.
         See /docs/ for more details.

         Some useful targets:

         help - this documentation
         all - builds the entire project, including plugins for all
         cache products in /cache-products/. Output classes
         in /classes/.
         runNode - runs the CacheBenchFwk. Depending on the number of nodes in the cluster(configured in
         cachebenchmark.xml),
         it will wait for all configured nodes to be launched before starting the tests

         Make sure you have looked at:

         1) 'build.properties' and have set JVM params (such as heap size,
         etc.) as necessary.
         2) '/conf/cachebench.xml' to configure the tests you want run, the
         nodes in the cluster if the case and the output file for reports.
         3) '/conf/log4j.xml' for logging settings (make sure these aren't
         very verbose as it can skew tests).
         4) Provided one of the plugins as a system property. This is
         necessary since at the moment plugin libs may overlap and
         cause problems, so are not loaded every time. Specify which
         plugin you plan to use in your test by using

         -Dorg.cachebench.plugins.jbosscache1=true -Dbind.address=${MYTESTIP_1}
         -Dorg.cachebench.plugins.jbosscache2=true -Dbind.address=${MYTESTIP_1}
         -Dorg.cachebench.plugins.ehcache=true -Dbind.address=${MYTESTIP_1}
         -Dorg.cachebench.plugins.coherence=true -Dtangosol.coherence.localhost=${MYTESTIP_1}
         // WORK IN PROGRESS
         -Dorg.cachebench.plugins.terracotta=true
         when running ant. Note that only one can be set at any time.
         5) Make sure you set up an correct NODE_INDEX environment property
         indicating the index of the node before starting it. E.g. if
         we have 3 nodes each process should have an environment
         variable named NODE_INDEX, having values in the range 0-2,
         each node having an distict value.
         see cachebench.xml\cachebench\cluster for more details

         NB: NEEDS Ant >= 1.7.0
      </echo>
   </target>


   <target name="fwk" description="Compile module Framework">
      <mkdir dir="${framework.output.dir}"/>
      <javac destdir="${framework.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}"
             fork="true">
         <classpath refid="framework.module.classpath"/>
         <src path="./src"/>
      </javac>
   </target>

   <target name="compile.module.ehcache150" depends="fwk"
           description="Compile module ehcache-1.5.0; production classes">
      <mkdir dir="./classes/production/ehcache-1.5.0"/>
      <javac destdir="./classes/production/ehcache-1.5.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/ehcache-1.5.0/lib" includes="*.jar"/>
            <fileset dir="./lib/common" includes="*.jar"/>
            <pathelement location="./cache-products/ehcache-1.5.0/conf"/>
            <pathelement location="${framework.output.dir}"/>
            <pathelement location="./classes/production/ehcache-1.5.0"/>
         </classpath>
         <src path="./cache-products/ehcache-1.5.0/src"/>
      </javac>
   </target>

   <target name="compile.module.ehcache160" depends="fwk"
           description="Compile module ehcache-1.6.0; production classes">
      <mkdir dir="./classes/production/ehcache-1.6.0"/>
      <javac destdir="./classes/production/ehcache-1.6.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/ehcache-1.6.0/lib" includes="*.jar"/>
            <fileset dir="./lib/common" includes="*.jar"/>
            <pathelement location="./cache-products/ehcache-1.6.0/conf"/>
            <pathelement location="${framework.output.dir}"/>
            <pathelement location="./classes/production/ehcache-1.6.0"/>
         </classpath>
         <src path="./cache-products/ehcache-1.6.0/src"/>
      </javac>
   </target>

   <target name="compile.module.coherence331" depends="fwk"
           description="Compile module coherence331; production classes" if="coherence.jars.present">
      <mkdir dir="./classes/production/coherence-3.3.1"/>
      <javac destdir="./classes/production/coherence-3.3.1" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/coherence-3.3.1/lib" includes="*.jar"/>
            <pathelement location="./cache-products/coherence-3.3.1/conf"/>
            <pathelement location="${framework.output.dir}"/>
            <pathelement location="./classes/production/coherence-3.3.1"/>
         </classpath>
         <src path="./cache-products/coherence-3.3.1"/>
      </javac>
   </target>

   <target name="compile.module.terracotta250" depends="fwk"
           description="Compile module terracotta-2.5.0; production classes">
      <mkdir dir="./classes/production/terracotta-2.5.0"/>
      <javac destdir="./classes/production/terracotta-2.5.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <pathelement location="./cache-products/terracotta-2.5.0/conf"/>
            <pathelement location="${framework.output.dir}"/>
            <pathelement location="./classes/production/terracotta-2.5.0"/>
         </classpath>
         <src path="./cache-products/terracotta-2.5.0/src"/>
      </javac>
   </target>

   <target name="compile.module.jbosscache140" depends="fwk"
           description="Compile module jbosscache-1.4.1; production classes">
      <mkdir dir="./classes/production/jbosscache-1.4.1"/>
      <javac destdir="./classes/production/jbosscache-1.4.1" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/jbosscache-1.4.1/lib" includes="**/*.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src>
            <dirset dir="./cache-products/jbosscache-1.4.1">
               <include name="src"/>
            </dirset>
         </src>
      </javac>
   </target>

   <target name="compile.module.jbosscache200" depends="fwk"
           description="Compile module jbosscache-2.0.0">
      <mkdir dir="./classes/production/jbosscache-2.0.0"/>
      <javac destdir="./classes/production/jbosscache-2.0.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/jbosscache-2.0.0/lib" includes="*.jar"/>
            <pathelement location="./lib/commons-logging.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src path="./cache-products/jbosscache-2.0.0/src"/>
      </javac>
   </target>

   <target name="compile.module.jbosscache210" depends="fwk"
           description="Compile module jbosscache-2.1.0cr2; production classes">
      <mkdir dir="./classes/production/jbosscache-2.1.0"/>
      <javac destdir="./classes/production/jbosscache-2.1.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/jbosscache-2.1.0/lib" includes="*.jar"/>
            <pathelement location="./lib/commons-logging.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src path="./cache-products/jbosscache-2.1.0/src"/>
      </javac>
   </target>

   <target name="compile.module.jbosscache220" depends="fwk"
           description="Compile module jbosscache-2.2.0; production classes">
      <mkdir dir="./classes/production/jbosscache-2.2.0"/>
      <javac destdir="./classes/production/jbosscache-2.2.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/jbosscache-2.2.0/lib" includes="*.jar"/>
            <pathelement location="./lib/commons-logging.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src path="./cache-products/jbosscache-2.2.0/src"/>
      </javac>
   </target>

   <target name="compile.module.pojocache220" depends="fwk"
           description="Compile module pojocache-2.2.0; production classes">
      <mkdir dir="./classes/production/pojocache-2.2.0"/>
      <javac destdir="./classes/production/pojocache-2.2.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/pojocache-2.2.0/lib" includes="*.jar"/>
            <pathelement location="./lib/commons-logging.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src path="./cache-products/pojocache-2.2.0/src"/>
      </javac>
   </target>

   <target name="compile.module.whirlycache101" depends="fwk"
           description="Compile module whirlycache-1.0.1; production classes">
      <mkdir dir="./classes/production/whirlycache-1.0.1"/>
      <javac destdir="./classes/production/whirlycache-1.0.1" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/whirlycache-1.0.1/lib" includes="**/*.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src path="./cache-products/whirlycache-1.0.1/src"/>
      </javac>
   </target>

   <target name="compile.module.jbosscache300" depends="fwk"
           description="Compile module jbosscache-3.0.0">
      <mkdir dir="./classes/production/jbosscache-3.0.0"/>
      <javac destdir="./classes/production/jbosscache-3.0.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/jbosscache-3.0.0/lib" includes="*.jar"/>
            <fileset dir="./lib/common" includes="*.jar"/>
            <pathelement location="./lib/commons-logging.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src path="./cache-products/jbosscache-3.0.0/src"/>
      </javac>
   </target>

   <target name="compile.module.infinispan400" depends="fwk"
           description="Compile module infinispan-4.0.0">
      <mkdir dir="./classes/production/infinispan-4.0.0"/>
      <javac destdir="./classes/production/infinispan-4.0.0" debug="${compiler.debug}"
             nowarn="${compiler.generate.no.warnings}" fork="true">
         <classpath>
            <fileset dir="./cache-products/infinispan-4.0.0/lib" includes="*.jar"/>
            <fileset dir="./lib/common" includes="*.jar"/>
            <pathelement location="./lib/commons-logging.jar"/>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <src path="./cache-products/infinispan-4.0.0/src"/>
      </javac>
   </target>

   <target name="clean" description="cleanup all">
      <delete dir="./classes"/>
   </target>

   <target name="all"
           depends="clean, fwk, compile.module.jbosscache140, compile.module.jbosscache200, compile.module.pojocache220, compile.module.jbosscache210, compile.module.jbosscache220, compile.module.terracotta250, compile.module.ehcache150, compile.module.ehcache160, compile.module.whirlycache101, compile.module.jbosscache300, compile.module.coherence331, compile.module.infinispan400"
           description="build all"/>

   <target name="checkClusterAddresses" depends="fwk"
           description="Check whether the cluster config is a valid one">
      <java classname="org.cachebench.ClusterConfigurationCheck" clonevm="true" fork="true">
         <classpath>
            <pathelement location="${framework.output.dir}"/>
         </classpath>
         <classpath refid="framework.module.classpath"/>
      </java>
   </target>

   <target name="deploy.sf" depends="fwk" description="builds the smartfrog jar and deploys it">
      <rmic classname="org.cachebench.smartfrog.CacheBenchmarkPrim" base="${framework.output.dir}" verify="true"
            debug="true">
         <classpath refid="framework.module.classpath"/>
      </rmic>
      <delete dir="${basedir}/smartfrog/sfClasses"/>
      <mkdir dir="${basedir}/smartfrog/sfClasses"/>
      <jar destfile="${basedir}/smartfrog/sfClasses/cacheBenchmark-sf.jar">
         <fileset dir="${framework.output.dir}" includes="**/smartfrog/**"/>
         <!--<fileset dir="${basedir}/smartfrog" excludes="**/sfClasses/**"/>-->
      </jar>
   </target>
</project>
