<schema xmlns:rg="urn:radargun:benchmark:2.1" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="urn:radargun:benchmark:2.1" version="1.0" xmlns="http://www.w3.org/2001/XMLSchema">
   <simpleType name="int">
      <union>
         <simpleType>
            <restriction base="integer"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <element name="benchmark">
      <complexType>
         <sequence maxOccurs="1" minOccurs="1">
            <element maxOccurs="1" minOccurs="0" name="master">
               <complexType>
                  <attribute name="bindAddress" type="string"/>
                  <attribute name="port" type="rg:int"/>
               </complexType>
            </element>
            <choice maxOccurs="1" minOccurs="0">
               <element maxOccurs="1" minOccurs="0" name="local">
                  <complexType/>
               </element>
               <element maxOccurs="1" minOccurs="0" name="clusters">
                  <complexType>
                     <choice maxOccurs="unbounded" minOccurs="1">
                        <element maxOccurs="unbounded" minOccurs="0" name="scale">
                           <complexType>
                              <sequence maxOccurs="1" minOccurs="1">
                                 <element name="cluster" type="rg:cluster_base"/>
                              </sequence>
                              <attribute name="from" type="rg:int" use="required"/>
                              <attribute name="to" type="rg:int" use="required"/>
                              <attribute name="inc" type="rg:int"/>
                           </complexType>
                        </element>
                        <element name="cluster" type="rg:cluster"/>
                     </choice>
                  </complexType>
               </element>
            </choice>
            <element maxOccurs="1" minOccurs="1" name="configurations">
               <complexType>
                  <sequence maxOccurs="1" minOccurs="1">
                     <element maxOccurs="unbounded" minOccurs="1" name="config">
                        <complexType>
                           <sequence maxOccurs="1" minOccurs="1">
                              <element maxOccurs="unbounded" minOccurs="1" name="setup">
                                 <complexType>
                                    <sequence maxOccurs="1" minOccurs="1">
                                       <any maxOccurs="1" minOccurs="0" namespace="##other"/>
                                    </sequence>
                                    <attribute name="plugin" type="string" use="required"/>
                                    <attribute name="group" type="string"/>
                                 </complexType>
                              </element>
                           </sequence>
                           <attribute name="name" type="string" use="required"/>
                        </complexType>
                     </element>
                  </sequence>
               </complexType>
            </element>
            <element maxOccurs="1" minOccurs="0" name="init" type="rg:org-radargun-stages-scenario-init-stage"/>
            <element name="scenario" type="rg:scenario"/>
            <element maxOccurs="1" minOccurs="0" name="destroy" type="rg:org-radargun-stages-scenario-destroy-stage"/>
            <element maxOccurs="1" minOccurs="0" name="cleanup" type="rg:org-radargun-stages-scenario-cleanup-stage"/>
            <element maxOccurs="1" minOccurs="0" name="reports">
               <complexType>
                  <sequence maxOccurs="1" minOccurs="1">
                     <element maxOccurs="unbounded" minOccurs="1" name="reporter">
                        <complexType>
                           <sequence maxOccurs="1" minOccurs="1">
                              <any maxOccurs="1" minOccurs="0" namespace="##other"/>
                              <element maxOccurs="unbounded" minOccurs="0" name="report">
                                 <complexType>
                                    <sequence maxOccurs="1" minOccurs="1">
                                       <any maxOccurs="1" minOccurs="0" namespace="##other"/>
                                    </sequence>
                                 </complexType>
                              </element>
                           </sequence>
                           <attribute name="type" type="string" use="required"/>
                        </complexType>
                     </element>
                  </sequence>
               </complexType>
            </element>
         </sequence>
      </complexType>
   </element>
   <complexType name="cluster_base">
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="unbounded" minOccurs="0" name="group">
            <complexType>
               <attribute name="name" type="string" use="required"/>
               <attribute name="size" type="rg:int" use="required"/>
            </complexType>
         </element>
      </sequence>
   </complexType>
   <complexType name="cluster">
      <complexContent>
         <extension base="rg:cluster_base">
            <attribute name="size" type="rg:int"/>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="property">
      <simpleContent>
         <extension base="string">
            <attribute name="name" type="string" use="required"/>
         </extension>
      </simpleContent>
   </complexType>
   <complexType abstract="true" name="stages">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="unbounded" minOccurs="1">
            <element name="repeat" type="rg:repeat"/>
            <element name="add-result" type="rg:org-radargun-stages-test-add-result-stage"/>
            <element name="analyze-test" type="rg:org-radargun-stages-test-analyze-test-stage"/>
            <element name="load-data" type="rg:org-radargun-stages-cache-test-load-data-stage"/>
            <element name="background-load-data-start" type="rg:org-radargun-stages-cache-background-background-load-data-start-stage"/>
            <element name="background-load-data-stop" type="rg:org-radargun-stages-cache-background-background-load-data-stop-stage"/>
            <element name="background-statistics-start" type="rg:org-radargun-stages-cache-background-background-statistics-start-stage"/>
            <element name="background-statistics-stop" type="rg:org-radargun-stages-cache-background-background-statistics-stop-stage"/>
            <element name="background-stressors-check" type="rg:org-radargun-stages-cache-background-background-stressors-check-stage"/>
            <element name="background-stressors-start" type="rg:org-radargun-stages-cache-background-background-stressors-start-stage"/>
            <element name="background-stressors-stop" type="rg:org-radargun-stages-cache-background-background-stressors-stop-stage"/>
            <element name="basic-operations-test" type="rg:org-radargun-stages-cache-test-basic-operations-test-stage"/>
            <element name="bulk-operations-test" type="rg:org-radargun-stages-cache-test-bulk-operations-test-stage"/>
            <element name="check-cache-data" type="rg:org-radargun-stages-cache-check-cache-data-stage"/>
            <element name="check-topology" type="rg:org-radargun-stages-topology-check-topology-stage"/>
            <element name="clear-cache" type="rg:org-radargun-stages-cache-clear-cache-stage"/>
            <element name="cluster-validation" type="rg:org-radargun-stages-cache-cluster-validation-stage"/>
            <element name="command" type="rg:org-radargun-stages-command-stage"/>
            <element name="conditional-operations-test" type="rg:org-radargun-stages-cache-test-conditional-operations-test-stage"/>
            <element name="define" type="rg:org-radargun-stages-define-stage"/>
            <element name="distributed-task" type="rg:org-radargun-stages-distributedtask-distributed-task-stage"/>
            <element name="isolation-level-check" type="rg:org-radargun-stages-cache-isolation-level-check-stage"/>
            <element name="iterate" type="rg:org-radargun-stages-iteration-iterate-stage"/>
            <element name="jmx-cluster-validation-prepare" type="rg:org-radargun-stages-monitor-jmx-cluster-validation-prepare-stage"/>
            <element name="jmx-cluster-validation" type="rg:org-radargun-stages-monitor-jmx-cluster-validation-stage"/>
            <element name="jmx-invocation" type="rg:org-radargun-stages-jmx-invocation-stage"/>
            <element name="j-profiler" type="rg:org-radargun-stages-monitor-j-profiler-stage"/>
            <element name="key-expiration-test" type="rg:org-radargun-stages-cache-test-key-expiration-test-stage"/>
            <element name="load-file" type="rg:org-radargun-stages-cache-load-file-stage"/>
            <element name="map-reduce" type="rg:org-radargun-stages-mapreduce-map-reduce-stage"/>
            <element name="monitor-start" type="rg:org-radargun-stages-monitor-monitor-start-stage"/>
            <element name="jvm-monitor-start" type="rg:org-radargun-stages-monitor-monitor-start-stage"/>
            <element name="monitor-stop" type="rg:org-radargun-stages-monitor-monitor-stop-stage"/>
            <element name="jvm-monitor-stop" type="rg:org-radargun-stages-monitor-monitor-stop-stage"/>
            <element name="parallel-start-stop" type="rg:org-radargun-stages-lifecycle-parallel-start-stop-stage"/>
            <element name="periodic-heap-dump" type="rg:org-radargun-stages-monitor-periodic-heap-dump-stage"/>
            <element name="query" type="rg:org-radargun-stages-cache-test-query-stage"/>
            <element name="random-data" type="rg:org-radargun-stages-cache-random-data-stage"/>
            <element name="register-listeners" type="rg:org-radargun-stages-cache-listeners-cluster-register-listeners-stage"/>
            <element name="reindex" type="rg:org-radargun-stages-cache-reindex-stage"/>
            <element name="service-start" type="rg:org-radargun-stages-lifecycle-service-start-stage"/>
            <element name="service-stop" type="rg:org-radargun-stages-lifecycle-service-stop-stage"/>
            <element name="set-log-level" type="rg:org-radargun-stages-monitor-set-log-level-stage"/>
            <element name="set-partitions" type="rg:org-radargun-stages-topology-set-partitions-stage"/>
            <element name="single-tx-check" type="rg:org-radargun-stages-cache-single-tx-check-stage"/>
            <element name="single-tx-load" type="rg:org-radargun-stages-cache-single-tx-load-stage"/>
            <element name="sleep" type="rg:org-radargun-stages-sleep-stage"/>
            <element name="stack-trace-watchdog" type="rg:org-radargun-stages-monitor-stack-trace-watchdog-stage"/>
            <element name="tpcc-benchmark" type="rg:org-radargun-stages-tpcc-tpcc-benchmark-stage"/>
            <element name="tpcc-population" type="rg:org-radargun-stages-tpcc-tpcc-population-stage"/>
            <element name="wait-for-topology-event" type="rg:org-radargun-stages-topology-wait-for-topology-event-stage"/>
            <element name="wait-for-topology-settle" type="rg:org-radargun-stages-topology-wait-for-topology-settle-stage"/>
            <element name="write-skew-check" type="rg:org-radargun-stages-cache-write-skew-check-stage"/>
            <element name="xs-repl-check" type="rg:org-radargun-stages-cache-xs-repl-check-stage"/>
         </choice>
      </sequence>
   </complexType>
   <complexType name="scenario">
      <complexContent>
         <extension base="rg:stages"/>
      </complexContent>
   </complexType>
   <complexType name="repeat">
      <complexContent>
         <extension base="rg:stages">
            <attribute name="times" type="rg:int"/>
            <attribute name="from" type="rg:int"/>
            <attribute name="to" type="rg:int"/>
            <attribute name="inc" type="rg:int"/>
            <attribute name="name" type="string"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-abstract-stage">
      <annotation>
         <documentation>Parent class for all stages.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="exit-on-failure" type="rg:boolean">
            <annotation>
               <documentation>If true, then the benchmark stops when the stage returns an error. If false, then the stages in the current scenario are skipped, and the next scenario starts executing. Default is false.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="exit-on-failure" type="rg:boolean">
         <annotation>
            <documentation>If true, then the benchmark stops when the stage returns an error. If false, then the stages in the current scenario are skipped, and the next scenario starts executing. Default is false.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <simpleType name="boolean">
      <union>
         <simpleType>
            <restriction base="boolean"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-abstract-dist-stage">
      <annotation>
         <documentation>Parent class for distributed stages.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="groups" type="string">
                  <annotation>
                     <documentation>Specifies in which groups this stage should actively run. The result set is intersection of specified slaves, groups and roles. Default is all groups.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="roles" type="string">
                  <annotation>
                     <documentation>Specifies on which slaves this stage should actively run, by their roles. The result set is intersection of specified slaves, groups and roles. Supported roles are [COORDINATOR]. Default is all roles.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="slaves" type="string">
                  <annotation>
                     <documentation>Specifies on which slaves this stage should actively run. The result set is intersection of specified slaves, groups and roles. Default is all slaves.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="groups" type="string">
               <annotation>
                  <documentation>Specifies in which groups this stage should actively run. The result set is intersection of specified slaves, groups and roles. Default is all groups.</documentation>
               </annotation>
            </attribute>
            <attribute name="roles" type="string">
               <annotation>
                  <documentation>Specifies on which slaves this stage should actively run, by their roles. The result set is intersection of specified slaves, groups and roles. Supported roles are [COORDINATOR]. Default is all roles.</documentation>
               </annotation>
            </attribute>
            <attribute name="slaves" type="string">
               <annotation>
                  <documentation>Specifies on which slaves this stage should actively run. The result set is intersection of specified slaves, groups and roles. Default is all slaves.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-abstract-master-stage">
      <annotation>
         <documentation>Parent class for stages performed on master.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-lifecycle-abstract-service-start-stage">
      <annotation>
         <documentation>Parent class for stages handling service start.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="may-fail-on" type="string">
                  <annotation>
                     <documentation>Set of slaves where the start may fail but this will not cause an error. Default is none.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="may-fail-on" type="string">
               <annotation>
                  <documentation>Set of slaves where the start may fail but this will not cause an error. Default is none.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-test-add-result-stage">
      <annotation>
         <documentation>Adds custom result to given test</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-master-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="iteration" type="rg:int">
                  <annotation>
                     <documentation>Which iteration should the result go to. Default is 0.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="iteration" type="rg:int">
               <annotation>
                  <documentation>Which iteration should the result go to. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="result-name" type="string" use="required">
               <annotation>
                  <documentation>Name of the result.</documentation>
               </annotation>
            </attribute>
            <attribute name="test-name" type="string" use="required">
               <annotation>
                  <documentation>Name of the test.</documentation>
               </annotation>
            </attribute>
            <attribute name="value" type="string" use="required">
               <annotation>
                  <documentation>Value used as aggregation value in the test.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-test-analyze-test-stage">
      <annotation>
         <documentation>Analyzes results of already executed test.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="iteration-selection" type="rg:org-radargun-stages-test-analyze-test-stage-iteration-selection">
                  <annotation>
                     <documentation>Which iterations should be included in the analysis. By default we iterate over all iterations.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="result-type" type="rg:org-radargun-stages-test-analyze-test-stage-result-type">
                  <annotation>
                     <documentation>What should be results of this analysis. Default is VALUE.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="1" name="statistics-type" type="rg:org-radargun-stats-representation-representation-type-converted-by-org-radargun-stats-representation-representation-type-complex-converter">
                  <annotation>
                     <documentation>What value do we we retrieve from the statistics.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="thread-grouping" type="rg:org-radargun-stages-test-analyze-test-stage-thread-grouping">
                  <annotation>
                     <documentation>How should the thread statistics be aggregated. By default all statistics are merged.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="analyzis-type" type="rg:org-radargun-stages-test-analyze-test-stage-analyzis-type" use="required">
               <annotation>
                  <documentation>How do we process the data. We can search for maximum, minimum or average.</documentation>
               </annotation>
            </attribute>
            <attribute name="iteration-selection" type="rg:org-radargun-stages-test-analyze-test-stage-iteration-selection">
               <annotation>
                  <documentation>Which iterations should be included in the analysis. By default we iterate over all iterations.</documentation>
               </annotation>
            </attribute>
            <attribute name="operation" type="string" use="required">
               <annotation>
                  <documentation>Operation that should be analyzed (e.g. BasicOperations.Get).</documentation>
               </annotation>
            </attribute>
            <attribute name="result-type" type="rg:org-radargun-stages-test-analyze-test-stage-result-type">
               <annotation>
                  <documentation>What should be results of this analysis. Default is VALUE.</documentation>
               </annotation>
            </attribute>
            <attribute name="store-result-to" type="string" use="required">
               <annotation>
                  <documentation>Name of the target property where the result should be stored.</documentation>
               </annotation>
            </attribute>
            <attribute name="test-name" type="string" use="required">
               <annotation>
                  <documentation>Name of the test whose result should be analyzed.</documentation>
               </annotation>
            </attribute>
            <attribute name="thread-grouping" type="rg:org-radargun-stages-test-analyze-test-stage-thread-grouping">
               <annotation>
                  <documentation>How should the thread statistics be aggregated. By default all statistics are merged.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="org-radargun-stages-test-analyze-test-stage-analyzis-type">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="MAX">
                  <annotation>
                     <documentation>Compute maximal value from all the results.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="MIN">
                  <annotation>
                     <documentation>Compute minimal value from all the results.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="AVERAGE">
                  <annotation>
                     <documentation>Compute average value from all the results.</documentation>
                  </annotation>
               </enumeration>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="org-radargun-stages-test-analyze-test-stage-iteration-selection">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="EACH_ITERATION">
                  <annotation>
                     <documentation>The analysis will run on all iterations.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="LAST_ITERATION">
                  <annotation>
                     <documentation>Only the last iteration will be analyzed.</documentation>
                  </annotation>
               </enumeration>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="org-radargun-stages-test-analyze-test-stage-result-type">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="VALUE">
                  <annotation>
                     <documentation>Report directly the value that was computed during this analysis.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="ITERATION">
                  <annotation>
                     <documentation>Report the iteration number where we have found the desired value. Works for analyzis-type MAX or MIN.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="NODE">
                  <annotation>
                     <documentation>Report the node (slave index) where we have found the desired value. Works for analyzis-type MAX or MIN.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="THREAD">
                  <annotation>
                     <documentation>Report the global thread id where we have found the desired value. Works for analyzis-type MAX or MIN.</documentation>
                  </annotation>
               </enumeration>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stats-representation-operation-throughput-gross-throughput">
      <annotation>
         <documentation>Retrieve gross throughput (counting errors)</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-representation-percentile-percentile-at">
      <annotation>
         <documentation>Retrieve max response time at given percentile.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="rg:double" use="required">
         <annotation>
            <documentation>Percentile value, between 0 and 100.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <simpleType name="double">
      <union>
         <simpleType>
            <restriction base="double"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stats-representation-mean-and-dev-deviation">
      <annotation>
         <documentation>Retrieve response time deviation.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-representation-operation-throughput-net-throughput">
      <annotation>
         <documentation>Retrieve net throughput (not counting errors).</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-representation-default-outcome-response-time-max">
      <annotation>
         <documentation>Retrieve maximum response time.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-representation-mean-and-dev-mean">
      <annotation>
         <documentation>Retrieve mean response time.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-representation-default-outcome-requests">
      <annotation>
         <documentation>Retrieve number of operations executed.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-representation-default-outcome-errors">
      <annotation>
         <documentation>Retrieve number of failed operations.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-representation-representation-type-converted-by-org-radargun-stats-representation-representation-type-complex-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="throughput-gross" type="rg:org-radargun-stats-representation-operation-throughput-gross-throughput"/>
            <element name="percentile" type="rg:org-radargun-stats-representation-percentile-percentile-at"/>
            <element name="response-time-deviation" type="rg:org-radargun-stats-representation-mean-and-dev-deviation"/>
            <element name="throughput-net" type="rg:org-radargun-stats-representation-operation-throughput-net-throughput"/>
            <element name="response-time-max" type="rg:org-radargun-stats-representation-default-outcome-response-time-max"/>
            <element name="response-time-mean" type="rg:org-radargun-stats-representation-mean-and-dev-mean"/>
            <element name="requests" type="rg:org-radargun-stats-representation-default-outcome-requests"/>
            <element name="errors" type="rg:org-radargun-stats-representation-default-outcome-errors"/>
         </choice>
      </sequence>
   </complexType>
   <simpleType name="org-radargun-stages-test-analyze-test-stage-thread-grouping">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="EACH_THREAD">
                  <annotation>
                     <documentation>Consider statistics of each thread.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="GROUP_BY_NODE">
                  <annotation>
                     <documentation>Merge statistics of all thread on one node and analyze the result value.</documentation>
                  </annotation>
               </enumeration>
               <enumeration value="GROUP_ALL">
                  <annotation>
                     <documentation>Merge statistics of all thread on all nodes and analyze the result value.</documentation>
                  </annotation>
               </enumeration>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-test-load-data-stage">
      <annotation>
         <documentation>Loads data into the cache using specified generators.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-selector" type="rg:org-radargun-stages-helpers-cache-selector-converted-by-org-radargun-stages-helpers-cache-selector-complex-converter">
                  <annotation>
                     <documentation>Selects which caches will be loaded. Default is the default cache.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="entry-size" type="rg:org-radargun-utils-fuzzy-converted-by-org-radargun-utils-fuzzy-integer-converter">
                  <annotation>
                     <documentation>Size of the value in bytes. Default is 1000.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="key-generator" type="rg:org-radargun-stages-cache-generators-key-generator-converted-by-org-radargun-stages-cache-generators-key-generator-complex-converter">
                  <annotation>
                     <documentation>Generator of keys (transforms key ID into key object). Default is 'string'.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="key-id-offset" type="rg:long">
                  <annotation>
                     <documentation>Initial key ID used for numbering the keys. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="load-all-keys" type="rg:boolean">
                  <annotation>
                     <documentation>This option forces local loading of all keys on all slaves in this group (not only numEntries/numNodes). Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="log-period" type="rg:long">
                  <annotation>
                     <documentation>Number of loaded entries after which a log entry should be written. Default is 10000.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="max-load-attempts" type="rg:int">
                  <annotation>
                     <documentation>During loading phase, if the insert fails, try it again. This is the maximum number of attempts. Default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-entries" type="rg:long">
                  <annotation>
                     <documentation>Total number of key-value entries that should be loaded into cache. Default is 100.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-threads" type="rg:int">
                  <annotation>
                     <documentation>The number of threads that should load the entries on one slave. Default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="remove" type="rg:boolean">
                  <annotation>
                     <documentation>If set to true, the entries are removed instead of being inserted. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="request-period" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Target period of put operations - e.g. when this is set to 10 msthe benchmark will try to do one put operation every 10 ms. By default the requests are executed at maximum speed.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="seed" type="rg:java-lang-long">
                  <annotation>
                     <documentation>Seed used for initialization of random generators - with same seed (and other arguments), the stage guarantees same entries added to the cache. By default the seed is not set.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="transaction-size" type="rg:int">
                  <annotation>
                     <documentation>Numbers of entries loaded in one transaction. Default is to not use transactions.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="use-transactions" type="rg:org-radargun-stages-test-transaction-mode">
                  <annotation>
                     <documentation>Specifies if the requests should be explicitly wrapped in transactions. Options are NEVER, ALWAYS and IF_TRANSACTIONAL: transactions are used only if the cache configuration is transactional and transactionSize &gt; 0. Default is IF_TRANSACTIONAL.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="value-generator" type="rg:org-radargun-stages-cache-generators-value-generator-converted-by-org-radargun-stages-cache-generators-value-generator-complex-converter">
                  <annotation>
                     <documentation>Generator of values. Default is byte-array.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="wait-on-error" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>When an attempt to load an entry fails, wait this period to reduce the chances of failing again. Default is one second.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="entry-size" type="rg:org-radargun-utils-fuzzy-converted-by-org-radargun-utils-fuzzy-integer-converter">
               <annotation>
                  <documentation>Size of the value in bytes. Default is 1000.</documentation>
               </annotation>
            </attribute>
            <attribute name="key-id-offset" type="rg:long">
               <annotation>
                  <documentation>Initial key ID used for numbering the keys. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="load-all-keys" type="rg:boolean">
               <annotation>
                  <documentation>This option forces local loading of all keys on all slaves in this group (not only numEntries/numNodes). Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-period" type="rg:long">
               <annotation>
                  <documentation>Number of loaded entries after which a log entry should be written. Default is 10000.</documentation>
               </annotation>
            </attribute>
            <attribute name="max-load-attempts" type="rg:int">
               <annotation>
                  <documentation>During loading phase, if the insert fails, try it again. This is the maximum number of attempts. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-entries" type="rg:long">
               <annotation>
                  <documentation>Total number of key-value entries that should be loaded into cache. Default is 100.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-threads" type="rg:int">
               <annotation>
                  <documentation>The number of threads that should load the entries on one slave. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="remove" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, the entries are removed instead of being inserted. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="request-period" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Target period of put operations - e.g. when this is set to 10 msthe benchmark will try to do one put operation every 10 ms. By default the requests are executed at maximum speed.</documentation>
               </annotation>
            </attribute>
            <attribute name="seed" type="rg:java-lang-long">
               <annotation>
                  <documentation>Seed used for initialization of random generators - with same seed (and other arguments), the stage guarantees same entries added to the cache. By default the seed is not set.</documentation>
               </annotation>
            </attribute>
            <attribute name="transaction-size" type="rg:int">
               <annotation>
                  <documentation>Numbers of entries loaded in one transaction. Default is to not use transactions.</documentation>
               </annotation>
            </attribute>
            <attribute name="use-transactions" type="rg:org-radargun-stages-test-transaction-mode">
               <annotation>
                  <documentation>Specifies if the requests should be explicitly wrapped in transactions. Options are NEVER, ALWAYS and IF_TRANSACTIONAL: transactions are used only if the cache configuration is transactional and transactionSize &gt; 0. Default is IF_TRANSACTIONAL.</documentation>
               </annotation>
            </attribute>
            <attribute name="wait-on-error" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>When an attempt to load an entry fails, wait this period to reduce the chances of failing again. Default is one second.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-helpers-cache-selector-default">
      <annotation>
         <documentation>All threads select the default cache (retrieved by using null cache name)</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stages-helpers-cache-selector-use-cache">
      <annotation>
         <documentation>All threads will use specified cache name</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="cache" type="string">
            <annotation>
               <documentation>Name of the cache returned in this selector.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="cache" type="string">
         <annotation>
            <documentation>Name of the cache returned in this selector.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-helpers-cache-selector-thread">
      <annotation>
         <documentation>Each thread will use cache 'cache_/threadIndex/' where /threadIndex/ is 0-based index of thread (6th thread on 2nd slave with 10 threads should have thread index 15)</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stages-helpers-cache-selector-converted-by-org-radargun-stages-helpers-cache-selector-complex-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="default" type="rg:org-radargun-stages-helpers-cache-selector-default"/>
            <element name="use-cache" type="rg:org-radargun-stages-helpers-cache-selector-use-cache"/>
            <element name="thread" type="rg:org-radargun-stages-helpers-cache-selector-thread"/>
         </choice>
      </sequence>
   </complexType>
   <simpleType name="org-radargun-utils-fuzzy-converted-by-org-radargun-utils-fuzzy-integer-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="\s*([0-9.]+(\.[0-9]*)?\s*%?\s*:\s*)?[0-9]+\s*(,\s*([0-9.]+(\.[0-9]*)?\s*%?\s*:\s*)?[0-9]+\s*)*"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stages-cache-generators-plugin-specific-key-generator">
      <annotation>
         <documentation>Wraps key generator that is specific to current plugin</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="fallback" type="rg:org-radargun-stages-cache-generators-key-generator-converted-by-org-radargun-stages-cache-generators-key-generator-complex-converter">
            <annotation>
               <documentation>Generator used when the plugin-specific generator is not available. By default an exception is thrown.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="params" type="string">
            <annotation>
               <documentation>Parameters for the generator (used to initialize properties). By default none.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="class" type="string" use="required">
         <annotation>
            <documentation>Fully qualified name of the key generator class.</documentation>
         </annotation>
      </attribute>
      <attribute name="params" type="string">
         <annotation>
            <documentation>Parameters for the generator (used to initialize properties). By default none.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-string-key-generator">
      <annotation>
         <documentation>Generates strings with configurable format.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="format" type="string">
            <annotation>
               <documentation>Formatting string for the keys. Default is 'key_%016X'.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="format" type="string">
         <annotation>
            <documentation>Formatting string for the keys. Default is 'key_%016X'.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-custom-key-generator">
      <annotation>
         <documentation>Creates keys of specified class, using single long arg constructor.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="class" type="string" use="required">
         <annotation>
            <documentation>Fully qualified name of the key class.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-cargo-key-generator">
      <annotation>
         <documentation>This generator creates key objects with the 8-byte index and random byte-array of configurable length (equal to all keys).</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="size" type="rg:int" use="required">
         <annotation>
            <documentation>Size of the cargo (in bytes).</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-object-key-generator">
      <annotation>
         <documentation>Generates externalizable keys wrapping long identifier of the key.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-timestamp-key-generator">
      <annotation>
         <documentation>Creates key with provided long as an actual key and additional timestamp when key was created</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-key-generator-converted-by-org-radargun-stages-cache-generators-key-generator-complex-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="plugin-specific" type="rg:org-radargun-stages-cache-generators-plugin-specific-key-generator"/>
            <element name="string" type="rg:org-radargun-stages-cache-generators-string-key-generator"/>
            <element name="custom" type="rg:org-radargun-stages-cache-generators-custom-key-generator"/>
            <element name="cargo" type="rg:org-radargun-stages-cache-generators-cargo-key-generator"/>
            <element name="object" type="rg:org-radargun-stages-cache-generators-object-key-generator"/>
            <element name="timestamp" type="rg:org-radargun-stages-cache-generators-timestamp-key-generator"/>
         </choice>
      </sequence>
   </complexType>
   <simpleType name="long">
      <union>
         <simpleType>
            <restriction base="long"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="long-converted-by-org-radargun-utils-time-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="[-0-9]+\s*[mMsS]?"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="java-lang-long">
      <union>
         <simpleType>
            <restriction base="long"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="org-radargun-stages-test-transaction-mode">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="NEVER"/>
               <enumeration value="IF_TRANSACTIONAL"/>
               <enumeration value="ALWAYS"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stages-cache-generators-sentence-generator">
      <annotation>
         <documentation>Generates text-objects with string from randomly picked words.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="class" type="string">
            <annotation>
               <documentation>Class instantiated by this generator. Default is 'org.radargun.query.TextObject'.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="file" type="string">
            <annotation>
               <documentation>File with words (one word per line).</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="words" type="string">
            <annotation>
               <documentation>List of words that should be used.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="class" type="string">
         <annotation>
            <documentation>Class instantiated by this generator. Default is 'org.radargun.query.TextObject'.</documentation>
         </annotation>
      </attribute>
      <attribute name="file" type="string">
         <annotation>
            <documentation>File with words (one word per line).</documentation>
         </annotation>
      </attribute>
      <attribute name="words" type="string">
         <annotation>
            <documentation>List of words that should be used.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-word-in-haystack-generator">
      <annotation>
         <documentation>Generates text-objects with string with single randomly picked word surrounded by another characters.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="class" type="string">
            <annotation>
               <documentation>Class instantiated by this generator. Default is 'org.radargun.query.TextObject'.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="file" type="string">
            <annotation>
               <documentation>File with words (one word per line).</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="words" type="string">
            <annotation>
               <documentation>List of words that should be used.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="class" type="string">
         <annotation>
            <documentation>Class instantiated by this generator. Default is 'org.radargun.query.TextObject'.</documentation>
         </annotation>
      </attribute>
      <attribute name="file" type="string">
         <annotation>
            <documentation>File with words (one word per line).</documentation>
         </annotation>
      </attribute>
      <attribute name="words" type="string">
         <annotation>
            <documentation>List of words that should be used.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-many-integers-object-generator">
      <annotation>
         <documentation>Generates objects with specified number of integers.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="class" type="string">
            <annotation>
               <documentation>Class instantiated by this generator. Default is 'org.radargun.query.ManyIntegersObject'.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="max" type="rg:int">
            <annotation>
               <documentation>Maximum value for all numbers (inclusive). Default is Integer.MAX_VALUE.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="min" type="rg:int">
            <annotation>
               <documentation>Minimum value for all numbers (inclusive). Default is Integer.MIN_VALUE.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="num-ints" type="rg:int">
            <annotation>
               <documentation>Expected number of integers in this object. Default is 10.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="class" type="string">
         <annotation>
            <documentation>Class instantiated by this generator. Default is 'org.radargun.query.ManyIntegersObject'.</documentation>
         </annotation>
      </attribute>
      <attribute name="max" type="rg:int">
         <annotation>
            <documentation>Maximum value for all numbers (inclusive). Default is Integer.MAX_VALUE.</documentation>
         </annotation>
      </attribute>
      <attribute name="min" type="rg:int">
         <annotation>
            <documentation>Minimum value for all numbers (inclusive). Default is Integer.MIN_VALUE.</documentation>
         </annotation>
      </attribute>
      <attribute name="num-ints" type="rg:int">
         <annotation>
            <documentation>Expected number of integers in this object. Default is 10.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-single-word-generator">
      <annotation>
         <documentation>Generates text-objects with single randomly picked word.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="class" type="string">
            <annotation>
               <documentation>Class instantiated by this generator. Default is 'org.radargun.query.TextObject'.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="file" type="string">
            <annotation>
               <documentation>File with words (one word per line).</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="words" type="string">
            <annotation>
               <documentation>List of words that should be used.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="class" type="string">
         <annotation>
            <documentation>Class instantiated by this generator. Default is 'org.radargun.query.TextObject'.</documentation>
         </annotation>
      </attribute>
      <attribute name="file" type="string">
         <annotation>
            <documentation>File with words (one word per line).</documentation>
         </annotation>
      </attribute>
      <attribute name="words" type="string">
         <annotation>
            <documentation>List of words that should be used.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-wrapped-array-value-generator">
      <annotation>
         <documentation>Generates random byte array wrapped in object that correctly implements equals() and hashCode().</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-number-object-generator">
      <annotation>
         <documentation>Generates objects with integer and double values.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="class" type="string">
            <annotation>
               <documentation>Class instantiated by this generator. Default is 'org.radargun.query.NumberObject'.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="double-max" type="rg:double">
            <annotation>
               <documentation>Maximal value (exclusive) of generated double part.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="double-min" type="rg:double">
            <annotation>
               <documentation>Minimal value (inclusive) of generated double part.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="int-max" type="rg:long">
            <annotation>
               <documentation>Maximal value (inclusive) of generated integer part.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="int-min" type="rg:long">
            <annotation>
               <documentation>Minimal value (inclusive) of generated integer part.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="class" type="string">
         <annotation>
            <documentation>Class instantiated by this generator. Default is 'org.radargun.query.NumberObject'.</documentation>
         </annotation>
      </attribute>
      <attribute name="double-max" type="rg:double">
         <annotation>
            <documentation>Maximal value (exclusive) of generated double part.</documentation>
         </annotation>
      </attribute>
      <attribute name="double-min" type="rg:double">
         <annotation>
            <documentation>Minimal value (inclusive) of generated double part.</documentation>
         </annotation>
      </attribute>
      <attribute name="int-max" type="rg:long">
         <annotation>
            <documentation>Maximal value (inclusive) of generated integer part.</documentation>
         </annotation>
      </attribute>
      <attribute name="int-min" type="rg:long">
         <annotation>
            <documentation>Minimal value (inclusive) of generated integer part.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-jpa-value-generator">
      <annotation>
         <documentation>Instantiates JPA entities. The constructor for the entities must match to the generateValue() method.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="class" type="string" use="required">
         <annotation>
            <documentation>Fully qualified name of the value class.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-cache-aware-text-generator">
      <annotation>
         <documentation>Generates values containing specified cache name.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="suffix" type="string">
            <annotation>
               <documentation>String encoded into the value so that the entry may be distinguished from entries loaded in different load stages. Default is empty string.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="cache-name" type="string" use="required">
         <annotation>
            <documentation>Cache name to be included in the generated value.</documentation>
         </annotation>
      </attribute>
      <attribute name="suffix" type="string">
         <annotation>
            <documentation>String encoded into the value so that the entry may be distinguished from entries loaded in different load stages. Default is empty string.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-byte-array-value-generator">
      <annotation>
         <documentation>Generates random byte arrays.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stages-cache-generators-value-generator-converted-by-org-radargun-stages-cache-generators-value-generator-complex-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="sentence" type="rg:org-radargun-stages-cache-generators-sentence-generator"/>
            <element name="word-in-haystack" type="rg:org-radargun-stages-cache-generators-word-in-haystack-generator"/>
            <element name="many-integers" type="rg:org-radargun-stages-cache-generators-many-integers-object-generator"/>
            <element name="single-word" type="rg:org-radargun-stages-cache-generators-single-word-generator"/>
            <element name="wrapped-array" type="rg:org-radargun-stages-cache-generators-wrapped-array-value-generator"/>
            <element name="number-object" type="rg:org-radargun-stages-cache-generators-number-object-generator"/>
            <element name="jpa" type="rg:org-radargun-stages-cache-generators-jpa-value-generator"/>
            <element name="cache-aware-text" type="rg:org-radargun-stages-cache-generators-cache-aware-text-generator"/>
            <element name="byte-array" type="rg:org-radargun-stages-cache-generators-byte-array-value-generator"/>
         </choice>
      </sequence>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-background-load-data-start-stage">
      <annotation>
         <documentation>Allows to load data into a cache in the background, while other stages may take place. To force process termination, use BackgroundLoadDataStopStage.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-test-load-data-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-background-load-data-stop-stage">
      <annotation>
         <documentation>Stops data loading process started by BackgroundLoadDataStartStage.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="timeout-duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Maximum time to wait for loading threads to finish. By default, wait until the threads finish their job.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="timeout-duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Maximum time to wait for loading threads to finish. By default, wait until the threads finish their job.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-background-statistics-start-stage">
      <annotation>
         <documentation>Starts collection of statistics from background threads and cache size.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="name" type="string">
                  <annotation>
                     <documentation>Name of the background operations. Default is 'Default'.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stats-iteration-duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Delay between statistics snapshots. Default is 5 seconds.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="name" type="string">
               <annotation>
                  <documentation>Name of the background operations. Default is 'Default'.</documentation>
               </annotation>
            </attribute>
            <attribute name="stats-iteration-duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Delay between statistics snapshots. Default is 5 seconds.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-background-statistics-stop-stage">
      <annotation>
         <documentation>Stop Statistics and return collected statistics to master.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="name" type="string">
                  <annotation>
                     <documentation>Name of the background operations. Default is 'Default'.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="test-name" type="string">
                  <annotation>
                     <documentation>Name of the test used for reports. Default is 'BackgroundStats'.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="name" type="string">
               <annotation>
                  <documentation>Name of the background operations. Default is 'Default'.</documentation>
               </annotation>
            </attribute>
            <attribute name="test-name" type="string">
               <annotation>
                  <documentation>Name of the test used for reports. Default is 'BackgroundStats'.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-background-stressors-check-stage">
      <annotation>
         <documentation>Stage that checks the progress in background stressors and fails if something went wrong.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="name" type="string">
                  <annotation>
                     <documentation>Name of the background operations. By default, all instances are checked.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="resume-after-checked" type="rg:boolean">
                  <annotation>
                     <documentation>Resume stressors after we have stopped them in order to let checkers check everything. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="wait-for-progress" type="rg:boolean">
                  <annotation>
                     <documentation>Waits until all stressors record new progress, or timeout (no-progress-timeout) elapses. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="wait-until-checked" type="rg:boolean">
                  <annotation>
                     <documentation>Stops stressors and waits until all confirmed operations are checked. Default is false.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="name" type="string">
               <annotation>
                  <documentation>Name of the background operations. By default, all instances are checked.</documentation>
               </annotation>
            </attribute>
            <attribute name="resume-after-checked" type="rg:boolean">
               <annotation>
                  <documentation>Resume stressors after we have stopped them in order to let checkers check everything. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="wait-for-progress" type="rg:boolean">
               <annotation>
                  <documentation>Waits until all stressors record new progress, or timeout (no-progress-timeout) elapses. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="wait-until-checked" type="rg:boolean">
               <annotation>
                  <documentation>Stops stressors and waits until all confirmed operations are checked. Default is false.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-background-stressors-start-stage">
      <annotation>
         <documentation>Starts background stressor threads.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-name" type="string">
                  <annotation>
                     <documentation>Cache used for the background operations. Default is null (default).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="dead-slave-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Period after which a slave is considered to be dead. Default is 90 s.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="delay-between-requests" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Time between consecutive requests of one stressor thread. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="gets" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET requests. Default is 2.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="key-id-offset" type="rg:long">
                  <annotation>
                     <documentation>First key ID used for key generation. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-entries" type="rg:long">
                  <annotation>
                     <documentation>Number of entries (key-value pairs) inserted into the cache. Default is 1024. Needs to be greater than or equal to the product of 'numThreads' and group size.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-threads" type="rg:int">
                  <annotation>
                     <documentation>Number of stressor threads. Default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="puts" type="rg:int">
                  <annotation>
                     <documentation>Ratio of PUT requests. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="removes" type="rg:int">
                  <annotation>
                     <documentation>Ratio of REMOVE requests. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="shared-keys" type="rg:boolean">
                  <annotation>
                     <documentation>By default each thread accesses only its private set of keys. This allows all threads all values. Atomic operations are required for this functionality. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="transaction-size" type="rg:int">
                  <annotation>
                     <documentation>Number of requests wrapped into single transaction. By default transactions are not used (explicitly).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="legacy" type="rg:org-radargun-stages-cache-background-legacy-logic-configuration"/>
               <element maxOccurs="1" minOccurs="0" name="log-logic" type="rg:org-radargun-stages-cache-background-log-logic-configuration"/>
               <element maxOccurs="1" minOccurs="0" name="name" type="string">
                  <annotation>
                     <documentation>Name of the background operations. Default is 'Default'.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="cache-name" type="string">
               <annotation>
                  <documentation>Cache used for the background operations. Default is null (default).</documentation>
               </annotation>
            </attribute>
            <attribute name="checkers-no-progress-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>*DEPRECATED* Maximum time for which are the log value checkers allowed to show no new checked values, when waiting for checks to complete or stressors to confirm new progress. Default is 10 minutes.</documentation>
               </annotation>
            </attribute>
            <attribute name="dead-slave-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Period after which a slave is considered to be dead. Default is 90 s.</documentation>
               </annotation>
            </attribute>
            <attribute name="delay-between-requests" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Time between consecutive requests of one stressor thread. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="gets" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET requests. Default is 2.</documentation>
               </annotation>
            </attribute>
            <attribute name="key-id-offset" type="rg:long">
               <annotation>
                  <documentation>First key ID used for key generation. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-entry-size" type="rg:int">
               <annotation>
                  <documentation>Size of value used in the entry. Default is 1024 bytes.</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-load-data-for-dead-slaves" type="string">
               <annotation>
                  <documentation>List of slaves whose data should be loaded by other threads because these slaves are not alive. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-load-data-on-slaves" type="string">
               <annotation>
                  <documentation>List of slaves where the data should be loaded (others immediately start executing requests). Default is all live slaves).</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-load-only" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, the stressor does not execute any requests after loading the data. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-load-with-put-if-absent" type="rg:boolean">
               <annotation>
                  <documentation>Use conditional putIfAbsent instead of simple put for loading the keys. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-no-loading" type="rg:boolean">
               <annotation>
                  <documentation>Do not execute the loading, start usual request right away.</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-put-with-replace" type="rg:boolean">
               <annotation>
                  <documentation>Use replace operations instead of puts during the test. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="legacy-wait-until-loaded" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the stage should wait until the entries are loaded by stressor threads. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-check-delayed-remove-expected-value" type="rg:boolean">
               <annotation>
                  <documentation>Check whether the value that is being removed matches the expected value. In failure scenarios, this may cause incorrect test failures. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-check-notifications" type="rg:boolean">
               <annotation>
                  <documentation>Check that listeners have been fired for each operation on each node (at least once). Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-checking-threads" type="rg:int">
               <annotation>
                  <documentation>Number of threads on each node that are checking whether all operations from stressor threads have been logged. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-counter-update-period" type="rg:long">
               <annotation>
                  <documentation>Number of operations after which will the stressor or checker update in-cache operation counter. Default is 50.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-debug-failures" type="rg:boolean">
               <annotation>
                  <documentation>Debug a key if a missing operation or notification is detected. Service needs to provide an implementation of Debuggable iterface.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-enabled" type="rg:boolean">
               <annotation>
                  <documentation>Use values which trace all operation on these keys. Therefore, they're always growing. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-ignore-dead-checkers" type="rg:boolean">
               <annotation>
                  <documentation>When the log value is full, the stressor needs to wait until all checkers confirm that the records have been checked before discarding oldest records. With ignoreDeadCheckers=true the stressor does not wait for checkers on dead nodes. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-max-delayed-remove-attempts" type="rg:long">
               <annotation>
                  <documentation>Maximum number of attempts to perform delayed removes when using transactions (as removes are performed in a separate TX,which can fail independently of TX performing PUT operations). If the value is negative, number of attempts is unlimited. Default is -1.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-max-transaction-attempts" type="rg:long">
               <annotation>
                  <documentation>Maximum number of attempts to perform transaction. If the value is negative, number of attempts is unlimited. Default is -1.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-no-progress-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Maximum time for which are the log value checkers allowed to show no new checked values, when waiting for checks to complete or stressors to confirm new progress. Default is 10 minutes.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-value-max-size" type="rg:int">
               <annotation>
                  <documentation>Maximum number of records in one entry before the older ones have to be truncated. Default is 100.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-logic-write-apply-max-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Maximum allowed delay to detect operation confirmed by stressor. Default is no delay.</documentation>
               </annotation>
            </attribute>
            <attribute name="name" type="string">
               <annotation>
                  <documentation>Name of the background operations. Default is 'Default'.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-entries" type="rg:long">
               <annotation>
                  <documentation>Number of entries (key-value pairs) inserted into the cache. Default is 1024. Needs to be greater than or equal to the product of 'numThreads' and group size.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-threads" type="rg:int">
               <annotation>
                  <documentation>Number of stressor threads. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="puts" type="rg:int">
               <annotation>
                  <documentation>Ratio of PUT requests. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="removes" type="rg:int">
               <annotation>
                  <documentation>Ratio of REMOVE requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="shared-keys" type="rg:boolean">
               <annotation>
                  <documentation>By default each thread accesses only its private set of keys. This allows all threads all values. Atomic operations are required for this functionality. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="transaction-size" type="rg:int">
               <annotation>
                  <documentation>Number of requests wrapped into single transaction. By default transactions are not used (explicitly).</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-legacy-logic-configuration">
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="entry-size" type="rg:int">
            <annotation>
               <documentation>Size of value used in the entry. Default is 1024 bytes.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="load-data-for-dead-slaves" type="string">
            <annotation>
               <documentation>List of slaves whose data should be loaded by other threads because these slaves are not alive. Default is empty.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="load-data-on-slaves" type="string">
            <annotation>
               <documentation>List of slaves where the data should be loaded (others immediately start executing requests). Default is all live slaves).</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="load-only" type="rg:boolean">
            <annotation>
               <documentation>If set to true, the stressor does not execute any requests after loading the data. Default is false.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="load-with-put-if-absent" type="rg:boolean">
            <annotation>
               <documentation>Use conditional putIfAbsent instead of simple put for loading the keys. Default is false.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="no-loading" type="rg:boolean">
            <annotation>
               <documentation>Do not execute the loading, start usual request right away.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="put-with-replace" type="rg:boolean">
            <annotation>
               <documentation>Use replace operations instead of puts during the test. Default is false.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="wait-until-loaded" type="rg:boolean">
            <annotation>
               <documentation>Specifies whether the stage should wait until the entries are loaded by stressor threads. Default is true.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="entry-size" type="rg:int">
         <annotation>
            <documentation>Size of value used in the entry. Default is 1024 bytes.</documentation>
         </annotation>
      </attribute>
      <attribute name="load-data-for-dead-slaves" type="string">
         <annotation>
            <documentation>List of slaves whose data should be loaded by other threads because these slaves are not alive. Default is empty.</documentation>
         </annotation>
      </attribute>
      <attribute name="load-data-on-slaves" type="string">
         <annotation>
            <documentation>List of slaves where the data should be loaded (others immediately start executing requests). Default is all live slaves).</documentation>
         </annotation>
      </attribute>
      <attribute name="load-only" type="rg:boolean">
         <annotation>
            <documentation>If set to true, the stressor does not execute any requests after loading the data. Default is false.</documentation>
         </annotation>
      </attribute>
      <attribute name="load-with-put-if-absent" type="rg:boolean">
         <annotation>
            <documentation>Use conditional putIfAbsent instead of simple put for loading the keys. Default is false.</documentation>
         </annotation>
      </attribute>
      <attribute name="no-loading" type="rg:boolean">
         <annotation>
            <documentation>Do not execute the loading, start usual request right away.</documentation>
         </annotation>
      </attribute>
      <attribute name="put-with-replace" type="rg:boolean">
         <annotation>
            <documentation>Use replace operations instead of puts during the test. Default is false.</documentation>
         </annotation>
      </attribute>
      <attribute name="wait-until-loaded" type="rg:boolean">
         <annotation>
            <documentation>Specifies whether the stage should wait until the entries are loaded by stressor threads. Default is true.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-log-logic-configuration">
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="check-delayed-remove-expected-value" type="rg:boolean">
            <annotation>
               <documentation>Check whether the value that is being removed matches the expected value. In failure scenarios, this may cause incorrect test failures. Default is true.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="check-notifications" type="rg:boolean">
            <annotation>
               <documentation>Check that listeners have been fired for each operation on each node (at least once). Default is false.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="checkers-no-progress-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
            <annotation>
               <documentation>Maximum time for which are the log value checkers allowed to show no new checked values, when waiting for checks to complete or stressors to confirm new progress. Default is 10 minutes.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="checking-threads" type="rg:int">
            <annotation>
               <documentation>Number of threads on each node that are checking whether all operations from stressor threads have been logged. Default is 10.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="counter-update-period" type="rg:long">
            <annotation>
               <documentation>Number of operations after which will the stressor or checker update in-cache operation counter. Default is 50.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="debug-failures" type="rg:boolean">
            <annotation>
               <documentation>Debug a key if a missing operation or notification is detected. Service needs to provide an implementation of Debuggable iterface.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="enabled" type="rg:boolean">
            <annotation>
               <documentation>Use values which trace all operation on these keys. Therefore, they're always growing. Default is false.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="ignore-dead-checkers" type="rg:boolean">
            <annotation>
               <documentation>When the log value is full, the stressor needs to wait until all checkers confirm that the records have been checked before discarding oldest records. With ignoreDeadCheckers=true the stressor does not wait for checkers on dead nodes. Default is false.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="max-delayed-remove-attempts" type="rg:long">
            <annotation>
               <documentation>Maximum number of attempts to perform delayed removes when using transactions (as removes are performed in a separate TX,which can fail independently of TX performing PUT operations). If the value is negative, number of attempts is unlimited. Default is -1.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="max-transaction-attempts" type="rg:long">
            <annotation>
               <documentation>Maximum number of attempts to perform transaction. If the value is negative, number of attempts is unlimited. Default is -1.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="no-progress-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
            <annotation>
               <documentation>Maximum time for which are the log value checkers allowed to show no new checked values, when waiting for checks to complete or stressors to confirm new progress. Default is 10 minutes.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="value-max-size" type="rg:int">
            <annotation>
               <documentation>Maximum number of records in one entry before the older ones have to be truncated. Default is 100.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="write-apply-max-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
            <annotation>
               <documentation>Maximum allowed delay to detect operation confirmed by stressor. Default is no delay.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="check-delayed-remove-expected-value" type="rg:boolean">
         <annotation>
            <documentation>Check whether the value that is being removed matches the expected value. In failure scenarios, this may cause incorrect test failures. Default is true.</documentation>
         </annotation>
      </attribute>
      <attribute name="check-notifications" type="rg:boolean">
         <annotation>
            <documentation>Check that listeners have been fired for each operation on each node (at least once). Default is false.</documentation>
         </annotation>
      </attribute>
      <attribute name="checkers-no-progress-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
         <annotation>
            <documentation>*DEPRECATED* Maximum time for which are the log value checkers allowed to show no new checked values, when waiting for checks to complete or stressors to confirm new progress. Default is 10 minutes.</documentation>
         </annotation>
      </attribute>
      <attribute name="checking-threads" type="rg:int">
         <annotation>
            <documentation>Number of threads on each node that are checking whether all operations from stressor threads have been logged. Default is 10.</documentation>
         </annotation>
      </attribute>
      <attribute name="counter-update-period" type="rg:long">
         <annotation>
            <documentation>Number of operations after which will the stressor or checker update in-cache operation counter. Default is 50.</documentation>
         </annotation>
      </attribute>
      <attribute name="debug-failures" type="rg:boolean">
         <annotation>
            <documentation>Debug a key if a missing operation or notification is detected. Service needs to provide an implementation of Debuggable iterface.</documentation>
         </annotation>
      </attribute>
      <attribute name="enabled" type="rg:boolean">
         <annotation>
            <documentation>Use values which trace all operation on these keys. Therefore, they're always growing. Default is false.</documentation>
         </annotation>
      </attribute>
      <attribute name="ignore-dead-checkers" type="rg:boolean">
         <annotation>
            <documentation>When the log value is full, the stressor needs to wait until all checkers confirm that the records have been checked before discarding oldest records. With ignoreDeadCheckers=true the stressor does not wait for checkers on dead nodes. Default is false.</documentation>
         </annotation>
      </attribute>
      <attribute name="max-delayed-remove-attempts" type="rg:long">
         <annotation>
            <documentation>Maximum number of attempts to perform delayed removes when using transactions (as removes are performed in a separate TX,which can fail independently of TX performing PUT operations). If the value is negative, number of attempts is unlimited. Default is -1.</documentation>
         </annotation>
      </attribute>
      <attribute name="max-transaction-attempts" type="rg:long">
         <annotation>
            <documentation>Maximum number of attempts to perform transaction. If the value is negative, number of attempts is unlimited. Default is -1.</documentation>
         </annotation>
      </attribute>
      <attribute name="no-progress-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
         <annotation>
            <documentation>Maximum time for which are the log value checkers allowed to show no new checked values, when waiting for checks to complete or stressors to confirm new progress. Default is 10 minutes.</documentation>
         </annotation>
      </attribute>
      <attribute name="value-max-size" type="rg:int">
         <annotation>
            <documentation>Maximum number of records in one entry before the older ones have to be truncated. Default is 100.</documentation>
         </annotation>
      </attribute>
      <attribute name="write-apply-max-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
         <annotation>
            <documentation>Maximum allowed delay to detect operation confirmed by stressor. Default is no delay.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-background-background-stressors-stop-stage">
      <annotation>
         <documentation>Stop BackgroundStressors.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="name" type="string">
                  <annotation>
                     <documentation>Name of the background operations. Default is 'Default'.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="name" type="string">
               <annotation>
                  <documentation>Name of the background operations. Default is 'Default'.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-test-test-stage">
      <annotation>
         <documentation>Base for test spawning several threads and benchmark of operations executed in those.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="amend-test" type="rg:boolean">
                  <annotation>
                     <documentation>By default, each stage creates a new test. If this property is set to true,results are amended to existing test (as iterations). Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="commit-transactions" type="rg:boolean">
                  <annotation>
                     <documentation>Specifies whether the transactions should be committed (true) or rolled back (false). Default is true</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Benchmark duration. This takes precedence over numRequests. By default switched off.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="iteration-property" type="string">
                  <annotation>
                     <documentation>Property, which value will be used to identify individual iterations (e.g. num-threads).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="log-period" type="rg:int">
                  <annotation>
                     <documentation>Number of operations after which a log entry should be written. Default is 10000.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="merge-thread-stats" type="rg:boolean">
                  <annotation>
                     <documentation>Merge statistics from all threads on single node to one record, instead of storing them all in-memory. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-requests" type="rg:long">
                  <annotation>
                     <documentation>Total number of request to be made against this session: reads + writes. If duration is specified this value is ignored. Default is 50000.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-threads-per-node" type="rg:int">
                  <annotation>
                     <documentation>The number of threads executing on each node. You have to set either this or 'total-threads'. No default.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="repeat-condition" type="rg:org-radargun-stages-test-performance-condition-converted-by-org-radargun-stages-test-performance-condition-converter">
                  <annotation>
                     <documentation>If this performance condition was not satisfied during this test, the current repeat will be exited. Default is none.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="request-period" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Target period of requests - e.g. when this is set to 10 msthe benchmark will try to do one request every 10 ms. By default the requests are executed at maximum speed.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="statistics" type="rg:org-radargun-stats-statistics-converted-by-org-radargun-stats-statistics-converter">
                  <annotation>
                     <documentation>Type of gathered statistics. Default are the 'default' statistics (fixed size memory footprint for each operation).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="synchronous-requests" type="rg:boolean">
                  <annotation>
                     <documentation>Local threads synchronize on starting each round of requests. Note that with requestPeriod &gt; 0, there is still the random ramp-up delay. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="test-name" type="string">
                  <annotation>
                     <documentation>Name of the test as used for reporting. Default is 'Test'.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Max duration of the test. Default is infinite.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="total-threads" type="rg:int">
                  <annotation>
                     <documentation>Total number of threads across whole cluster. You have to set either this or 'num-threads-per-node'. No default.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="transaction-size" type="rg:int">
                  <annotation>
                     <documentation>Number of requests in one transaction. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="use-transactions" type="rg:org-radargun-stages-test-transaction-mode">
                  <annotation>
                     <documentation>Specifies if the requests should be explicitly wrapped in transactions. Options are NEVER, ALWAYS and IF_TRANSACTIONAL: transactions are used only if the cache configuration is transactional and transactionSize &gt; 0. Default is IF_TRANSACTIONAL.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="amend-test" type="rg:boolean">
               <annotation>
                  <documentation>By default, each stage creates a new test. If this property is set to true,results are amended to existing test (as iterations). Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="commit-transactions" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the transactions should be committed (true) or rolled back (false). Default is true</documentation>
               </annotation>
            </attribute>
            <attribute name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Benchmark duration. This takes precedence over numRequests. By default switched off.</documentation>
               </annotation>
            </attribute>
            <attribute name="iteration-property" type="string">
               <annotation>
                  <documentation>Property, which value will be used to identify individual iterations (e.g. num-threads).</documentation>
               </annotation>
            </attribute>
            <attribute name="log-period" type="rg:int">
               <annotation>
                  <documentation>Number of operations after which a log entry should be written. Default is 10000.</documentation>
               </annotation>
            </attribute>
            <attribute name="merge-thread-stats" type="rg:boolean">
               <annotation>
                  <documentation>Merge statistics from all threads on single node to one record, instead of storing them all in-memory. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-requests" type="rg:long">
               <annotation>
                  <documentation>Total number of request to be made against this session: reads + writes. If duration is specified this value is ignored. Default is 50000.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-threads-per-node" type="rg:int">
               <annotation>
                  <documentation>The number of threads executing on each node. You have to set either this or 'total-threads'. No default.</documentation>
               </annotation>
            </attribute>
            <attribute name="request-period" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Target period of requests - e.g. when this is set to 10 msthe benchmark will try to do one request every 10 ms. By default the requests are executed at maximum speed.</documentation>
               </annotation>
            </attribute>
            <attribute name="synchronous-requests" type="rg:boolean">
               <annotation>
                  <documentation>Local threads synchronize on starting each round of requests. Note that with requestPeriod &gt; 0, there is still the random ramp-up delay. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="test-name" type="string">
               <annotation>
                  <documentation>Name of the test as used for reporting. Default is 'Test'.</documentation>
               </annotation>
            </attribute>
            <attribute name="timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Max duration of the test. Default is infinite.</documentation>
               </annotation>
            </attribute>
            <attribute name="total-threads" type="rg:int">
               <annotation>
                  <documentation>Total number of threads across whole cluster. You have to set either this or 'num-threads-per-node'. No default.</documentation>
               </annotation>
            </attribute>
            <attribute name="transaction-size" type="rg:int">
               <annotation>
                  <documentation>Number of requests in one transaction. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="use-transactions" type="rg:org-radargun-stages-test-transaction-mode">
               <annotation>
                  <documentation>Specifies if the requests should be explicitly wrapped in transactions. Options are NEVER, ALWAYS and IF_TRANSACTIONAL: transactions are used only if the cache configuration is transactional and transactionSize &gt; 0. Default is IF_TRANSACTIONAL.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-gross-throughput">
      <annotation>
         <documentation>Checks value of gross throughput of given operation.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="below" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the actual throughput is below specified value (operations per second)</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="over" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the actual throughput is above specified value (operations per second)</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="below" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the actual throughput is below specified value (operations per second)</documentation>
         </annotation>
      </attribute>
      <attribute name="on" type="string" use="required">
         <annotation>
            <documentation>Identifier of the operation (or its derivate) that should be tested.</documentation>
         </annotation>
      </attribute>
      <attribute name="over" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the actual throughput is above specified value (operations per second)</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-percentile">
      <annotation>
         <documentation>Checks value of the response time of given operation at some percentile (0 = fastest operation, 100 = slowest operation).</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="below" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
            <annotation>
               <documentation>Test if the response time is below specified value (use time unit!)</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="over" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
            <annotation>
               <documentation>Test if the response time is above specified value (use time unit!)</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="below" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
         <annotation>
            <documentation>Test if the response time is below specified value (use time unit!)</documentation>
         </annotation>
      </attribute>
      <attribute name="on" type="string" use="required">
         <annotation>
            <documentation>Identifier of the operation (or its derivate) that should be tested.</documentation>
         </annotation>
      </attribute>
      <attribute name="over" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
         <annotation>
            <documentation>Test if the response time is above specified value (use time unit!)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="rg:double" use="required">
         <annotation>
            <documentation>Percentile used for the comparison: (0 = fastest operation, 100 = slowest operation)</documentation>
         </annotation>
      </attribute>
   </complexType>
   <simpleType name="java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="[0-9]*(\.[0-9]*)?\s*(ns|us|ms|s|m)"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stages-test-performance-condition-mean">
      <annotation>
         <documentation>Checks value of the mean response time of given operation.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="below" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
            <annotation>
               <documentation>Test if the mean response time is below specified value (use time unit!)</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="over" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
            <annotation>
               <documentation>Test if the mean response time is above specified value (use time unit!)</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="below" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
         <annotation>
            <documentation>Test if the mean response time is below specified value (use time unit!)</documentation>
         </annotation>
      </attribute>
      <attribute name="on" type="string" use="required">
         <annotation>
            <documentation>Identifier of the operation (or its derivate) that should be tested.</documentation>
         </annotation>
      </attribute>
      <attribute name="over" type="rg:java-lang-long-converted-by-org-radargun-utils-nano-time-converter">
         <annotation>
            <documentation>Test if the mean response time is above specified value (use time unit!)</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-net-throughput">
      <annotation>
         <documentation>Checks value of net throughput of given operation.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="below" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the actual throughput is below specified value (operations per second)</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="over" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the actual throughput is above specified value (operations per second)</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="below" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the actual throughput is below specified value (operations per second)</documentation>
         </annotation>
      </attribute>
      <attribute name="on" type="string" use="required">
         <annotation>
            <documentation>Identifier of the operation (or its derivate) that should be tested.</documentation>
         </annotation>
      </attribute>
      <attribute name="over" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the actual throughput is above specified value (operations per second)</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-requests">
      <annotation>
         <documentation>Checks number of executed operations.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="below" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the number of executed operations is below this value.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="over" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the number of executed operations is above this value.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="below" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the number of executed operations is below this value.</documentation>
         </annotation>
      </attribute>
      <attribute name="on" type="string" use="required">
         <annotation>
            <documentation>Identifier of the operation (or its derivate) that should be tested.</documentation>
         </annotation>
      </attribute>
      <attribute name="over" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the number of executed operations is above this value.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-any">
      <annotation>
         <documentation>Any of inner conditions is true</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:java-util-list-converted-by-org-radargun-stages-test-performance-condition-list-converter">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-errors">
      <annotation>
         <documentation>Checks number of executed operations.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="percent-below" type="rg:java-lang-integer">
            <annotation>
               <documentation>Test if the percentage of errors (out of total number of requests) is below this value.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="percent-over" type="rg:java-lang-integer">
            <annotation>
               <documentation>Test if the percentage of errors (out of total number of requests) is above this value.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="total-below" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the total number of errors is below this value.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="total-over" type="rg:java-lang-long">
            <annotation>
               <documentation>Test if the total number of errors is above this value.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="on" type="string" use="required">
         <annotation>
            <documentation>Identifier of the operation (or its derivate) that should be tested.</documentation>
         </annotation>
      </attribute>
      <attribute name="percent-below" type="rg:java-lang-integer">
         <annotation>
            <documentation>Test if the percentage of errors (out of total number of requests) is below this value.</documentation>
         </annotation>
      </attribute>
      <attribute name="percent-over" type="rg:java-lang-integer">
         <annotation>
            <documentation>Test if the percentage of errors (out of total number of requests) is above this value.</documentation>
         </annotation>
      </attribute>
      <attribute name="total-below" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the total number of errors is below this value.</documentation>
         </annotation>
      </attribute>
      <attribute name="total-over" type="rg:java-lang-long">
         <annotation>
            <documentation>Test if the total number of errors is above this value.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <simpleType name="java-lang-integer">
      <union>
         <simpleType>
            <restriction base="integer"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="java-util-list-converted-by-org-radargun-stages-test-performance-condition-list-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="unbounded" minOccurs="0">
            <element name="all" type="rg:org-radargun-stages-test-performance-condition-all"/>
            <element name="throughput-gross" type="rg:org-radargun-stages-test-performance-condition-gross-throughput"/>
            <element name="percentile" type="rg:org-radargun-stages-test-performance-condition-percentile"/>
            <element name="mean" type="rg:org-radargun-stages-test-performance-condition-mean"/>
            <element name="throughput-net" type="rg:org-radargun-stages-test-performance-condition-net-throughput"/>
            <element name="requests" type="rg:org-radargun-stages-test-performance-condition-requests"/>
            <element name="any" type="rg:org-radargun-stages-test-performance-condition-any"/>
            <element name="errors" type="rg:org-radargun-stages-test-performance-condition-errors"/>
         </choice>
      </sequence>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-all">
      <annotation>
         <documentation>All inner conditions are true</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:java-util-list-converted-by-org-radargun-stages-test-performance-condition-list-converter">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-test-performance-condition-converted-by-org-radargun-stages-test-performance-condition-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="all" type="rg:org-radargun-stages-test-performance-condition-all"/>
            <element name="throughput-gross" type="rg:org-radargun-stages-test-performance-condition-gross-throughput"/>
            <element name="percentile" type="rg:org-radargun-stages-test-performance-condition-percentile"/>
            <element name="mean" type="rg:org-radargun-stages-test-performance-condition-mean"/>
            <element name="throughput-net" type="rg:org-radargun-stages-test-performance-condition-net-throughput"/>
            <element name="requests" type="rg:org-radargun-stages-test-performance-condition-requests"/>
            <element name="any" type="rg:org-radargun-stages-test-performance-condition-any"/>
            <element name="errors" type="rg:org-radargun-stages-test-performance-condition-errors"/>
         </choice>
      </sequence>
   </complexType>
   <complexType name="org-radargun-stats-synchronized-statistics">
      <annotation>
         <documentation>Default statistics that support concurrent access.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="operation-stats" type="rg:org-radargun-stats-operation-stats-converted-by-org-radargun-stats-operation-stats-converter">
            <annotation>
               <documentation>Operation statistics prototype.</documentation>
            </annotation>
         </element>
      </sequence>
   </complexType>
   <complexType name="org-radargun-stats-histogram-operation-stats">
      <annotation>
         <documentation>Stores data required for producing histogram or percentiles.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="digits" type="rg:int">
            <annotation>
               <documentation>Number of significant digits. Default is 2.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="max-value" type="rg:long-converted-by-org-radargun-utils-nano-time-converter">
            <annotation>
               <documentation>Maximum value that could be recorded. Default is one hour.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="digits" type="rg:int">
         <annotation>
            <documentation>Number of significant digits. Default is 2.</documentation>
         </annotation>
      </attribute>
      <attribute name="max-value" type="rg:long-converted-by-org-radargun-utils-nano-time-converter">
         <annotation>
            <documentation>Maximum value that could be recorded. Default is one hour.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <simpleType name="long-converted-by-org-radargun-utils-nano-time-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="[0-9]*(\.[0-9]*)?\s*(ns|us|ms|s|m)"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stats-all-recording-operation-stats">
      <annotation>
         <documentation>Operation statistics recording all requests' response times.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-default-operation-stats">
      <annotation>
         <documentation>Operations statistics with fixed memory footprint.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
   </complexType>
   <complexType name="org-radargun-stats-operation-stats-converted-by-org-radargun-stats-operation-stats-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="unbounded" minOccurs="1">
            <element name="histogram" type="rg:org-radargun-stats-histogram-operation-stats"/>
            <element name="all" type="rg:org-radargun-stats-all-recording-operation-stats"/>
            <element name="default" type="rg:org-radargun-stats-default-operation-stats"/>
         </choice>
      </sequence>
   </complexType>
   <complexType name="org-radargun-stats-default-statistics">
      <annotation>
         <documentation>Statistics with the same implementation of operation statistics.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="operation-stats" type="rg:org-radargun-stats-operation-stats-converted-by-org-radargun-stats-operation-stats-converter">
            <annotation>
               <documentation>Operation statistics prototype.</documentation>
            </annotation>
         </element>
      </sequence>
   </complexType>
   <complexType name="org-radargun-stats-periodic-statistics">
      <annotation>
         <documentation>Periodically switches the statistics where the operation is recorded.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="implementation" type="rg:org-radargun-stats-statistics-converted-by-org-radargun-stats-statistics-converter">
            <annotation>
               <documentation>Operation statistics prototype. Default is DefaultStatistics.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="period" type="rg:long-converted-by-org-radargun-utils-time-converter" use="required">
         <annotation>
            <documentation>Duration of one sample.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stats-statistics-converted-by-org-radargun-stats-statistics-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="synchronized" type="rg:org-radargun-stats-synchronized-statistics"/>
            <element name="default" type="rg:org-radargun-stats-default-statistics"/>
            <element name="periodic" type="rg:org-radargun-stats-periodic-statistics"/>
         </choice>
      </sequence>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-cache-test-cache-test-stage">
      <annotation>
         <documentation>Benchmark where several client threads access cache limited by time or number of requests.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-test-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-selector" type="rg:org-radargun-stages-helpers-cache-selector-converted-by-org-radargun-stages-helpers-cache-selector-complex-converter">
                  <annotation>
                     <documentation>Selects which caches will be used in the test. By default the selector is retrieved from slave state.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="entry-size" type="rg:org-radargun-utils-fuzzy-converted-by-org-radargun-utils-fuzzy-integer-converter">
                  <annotation>
                     <documentation>Size of the value in bytes. Default is 1000.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="key-generator" type="rg:org-radargun-stages-cache-generators-key-generator-converted-by-org-radargun-stages-cache-generators-key-generator-complex-converter">
                  <annotation>
                     <documentation>Generator of keys used in the test (transforms key ID into key object). By default the generator is retrieved from slave state.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="value-generator" type="rg:org-radargun-stages-cache-generators-value-generator-converted-by-org-radargun-stages-cache-generators-value-generator-complex-converter">
                  <annotation>
                     <documentation>Generator of values used in the test. By default the generator is retrieved from slave state.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="entry-size" type="rg:org-radargun-utils-fuzzy-converted-by-org-radargun-utils-fuzzy-integer-converter">
               <annotation>
                  <documentation>Size of the value in bytes. Default is 1000.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-cache-test-cache-operations-test-stage">
      <annotation>
         <documentation>Common ancestor for all xOperationsTestStages</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-test-cache-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="1" name="key-selector" type="rg:org-radargun-stages-cache-test-key-selector-factory-converted-by-org-radargun-stages-cache-test-cache-operations-test-stage-key-selector-factory-converter">
                  <annotation>
                     <documentation>Selects which key IDs are used in the test.</documentation>
                  </annotation>
               </element>
            </sequence>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-concurrent-keys-selector-factory">
      <annotation>
         <documentation>Each thread works with its own private set of keys, fixed for the whole duration of the test.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="num-entries-per-thread" type="rg:long">
            <annotation>
               <documentation>Number of key-value entries per each thread. You have to set either this or total-entries.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="total-entries" type="rg:long">
            <annotation>
               <documentation>Total number of key-value entries. You have to set either this or num-entries-per-thread.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="num-entries-per-thread" type="rg:long">
         <annotation>
            <documentation>Number of key-value entries per each thread. You have to set either this or total-entries.</documentation>
         </annotation>
      </attribute>
      <attribute name="total-entries" type="rg:long">
         <annotation>
            <documentation>Total number of key-value entries. You have to set either this or num-entries-per-thread.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-colliding-keys-selector-factory">
      <annotation>
         <documentation>In the test fixed set of entries is used and this is shared among all stressor threads.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="num-entries" type="rg:long" use="required">
         <annotation>
            <documentation>Total number of key-value entries.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-gaussian-keys-selector-factory">
      <annotation>
         <documentation>In the test fixed set of entries is used and this is shared among all stressor threads. Additionally, the keysare selected using a normal (gaussian) distribution.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="mean" type="rg:long">
            <annotation>
               <documentation>Mean value of indices. Default is numEntries/2.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="standard-deviation" type="rg:long">
            <annotation>
               <documentation>Standard deviation. Default is numEntries/8.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="mean" type="rg:long">
         <annotation>
            <documentation>Mean value of indices. Default is numEntries/2.</documentation>
         </annotation>
      </attribute>
      <attribute name="num-entries" type="rg:long" use="required">
         <annotation>
            <documentation>Total number of key-value entries.</documentation>
         </annotation>
      </attribute>
      <attribute name="standard-deviation" type="rg:long">
         <annotation>
            <documentation>Standard deviation. Default is numEntries/8.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-key-selector-factory-converted-by-org-radargun-stages-cache-test-cache-operations-test-stage-key-selector-factory-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="concurrent-keys" type="rg:org-radargun-stages-cache-test-concurrent-keys-selector-factory"/>
            <element name="colliding-keys" type="rg:org-radargun-stages-cache-test-colliding-keys-selector-factory"/>
            <element name="gaussian-keys" type="rg:org-radargun-stages-cache-test-gaussian-keys-selector-factory"/>
         </choice>
      </sequence>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-test-basic-operations-test-stage">
      <annotation>
         <documentation>Test using BasicOperations</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-test-cache-operations-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="contains-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of CONTAINS requests. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="get-and-put-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET_AND_PUT requests. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="get-and-remove-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET_AND_REMOVE requests. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="get-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET requests. Default is 4.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="put-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of PUT requests. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="remove-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of REMOVE requests. Default is 0.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="contains-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of CONTAINS requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="get-and-put-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET_AND_PUT requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="get-and-remove-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET_AND_REMOVE requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="get-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET requests. Default is 4.</documentation>
               </annotation>
            </attribute>
            <attribute name="put-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of PUT requests. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="remove-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of REMOVE requests. Default is 0.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-test-bulk-operations-test-stage">
      <annotation>
         <documentation>Executes operations from BulkOperations trait.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-test-cache-operations-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="bulk-size" type="rg:int">
                  <annotation>
                     <documentation>Number of keys inserted/retrieved within one operation. Applicable only when the cache wrapper supports bulk operations. Default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="get-all-async-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET_ALL_ASYNC requests. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="get-all-native-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET_ALL_NATIVE requests. Default is 4.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="put-all-async-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of PUT_ALL_ASYNC requests. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="put-all-native-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of PUT_ALL_NATIVE requests. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="remove-all-async-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of REMOVE_ALL_ASYNC requests. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="remove-all-native-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of REMOVE_ALL_NATIVE requests. Default is 0.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="bulk-size" type="rg:int">
               <annotation>
                  <documentation>Number of keys inserted/retrieved within one operation. Applicable only when the cache wrapper supports bulk operations. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="get-all-async-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET_ALL_ASYNC requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="get-all-native-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET_ALL_NATIVE requests. Default is 4.</documentation>
               </annotation>
            </attribute>
            <attribute name="put-all-async-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of PUT_ALL_ASYNC requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="put-all-native-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of PUT_ALL_NATIVE requests. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="remove-all-async-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of REMOVE_ALL_ASYNC requests. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="remove-all-native-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of REMOVE_ALL_NATIVE requests. Default is 0.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-check-cache-data-stage">
      <annotation>
         <documentation>Stage for checking presence or absence of data entered in other stages.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="check-entry-count" type="rg:long">
                  <annotation>
                     <documentation>Number of entries that will be checked in each step. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-subparts-are-replicas" type="rg:boolean">
                  <annotation>
                     <documentation>Check that number of non-zero subparts is equal to number of replicas. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-subparts-equal" type="rg:boolean">
                  <annotation>
                     <documentation>Check whether the same subparts from each cache have the same size. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-subparts-sum-local" type="rg:boolean">
                  <annotation>
                     <documentation>Check whether the sum of subparts sizes is the same as local size. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-threads" type="rg:int">
                  <annotation>
                     <documentation>Number of thread per node which check data validity. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="debug-null" type="rg:boolean">
                  <annotation>
                     <documentation>If the GET request results in null response, call wrapper-specific functions to show debug info. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="deleted" type="rg:boolean">
                  <annotation>
                     <documentation>If set to true, we are checking that the data are NOT in the cluster anymore. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="extra-entries" type="string">
                  <annotation>
                     <documentation>Entries that do not have the expected form but occur in the cluster. This string specifies a polynomial in number of slaves: 1,2,3 with 4 slaves would result in 1 + 2*4 + 3*4*4 = 57 extra entries.Defaults to 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="fail-on-null" type="rg:boolean">
                  <annotation>
                     <documentation>If entry is null, fail immediately. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="first-entry-offset" type="rg:long">
                  <annotation>
                     <documentation>Index of key of the first entry.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="first-entry-offset-slave-index" type="rg:long">
                  <annotation>
                     <documentation>Index of key of the first entry. This number will be multiplied by slaveIndex. Default is 0. Has precedence over 'first-entry-offset'.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="ignore-sum" type="rg:boolean">
                  <annotation>
                     <documentation>Usually the test checks that sum of local nodes = numOwners * numEntries + extraEntries.This option disables such behaviour. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="key-generator" type="rg:org-radargun-stages-cache-generators-key-generator-converted-by-org-radargun-stages-cache-generators-key-generator-complex-converter">
                  <annotation>
                     <documentation>Generator of keys (transforms key ID into key object). By default the generator is retrieved from slave state.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="live-slaves-hint" type="rg:int">
                  <annotation>
                     <documentation>Hint how many slaves are currently alive - if set to &gt; 0 then the query for number of entries in this cache is postponed until the cache appears to be fully replicated. By default this is disabled.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="log-checks-count" type="rg:int">
                  <annotation>
                     <documentation>Number of queries after which a DEBUG log message is printed. Default is 10000.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="memory-only" type="rg:boolean">
                  <annotation>
                     <documentation>If the cache wrapper supports persistent storage and this is set to true, the check will be executed only against in-memory data. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="size-only" type="rg:boolean">
                  <annotation>
                     <documentation>If true, the entries are not retrieved, this stage only checks that the sum of entries from local nodes is correct. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="step-entry-count" type="rg:long">
                  <annotation>
                     <documentation>Number of entries stepped in each step. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="value-generator" type="rg:org-radargun-stages-cache-generators-value-generator-converted-by-org-radargun-stages-cache-generators-value-generator-complex-converter">
                  <annotation>
                     <documentation>Generator of values. By default the generator is retrieved from slave state.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="check-entry-count" type="rg:long">
               <annotation>
                  <documentation>Number of entries that will be checked in each step. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-subparts-are-replicas" type="rg:boolean">
               <annotation>
                  <documentation>Check that number of non-zero subparts is equal to number of replicas. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-subparts-equal" type="rg:boolean">
               <annotation>
                  <documentation>Check whether the same subparts from each cache have the same size. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-subparts-sum-local" type="rg:boolean">
               <annotation>
                  <documentation>Check whether the sum of subparts sizes is the same as local size. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-threads" type="rg:int">
               <annotation>
                  <documentation>Number of thread per node which check data validity. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="debug-null" type="rg:boolean">
               <annotation>
                  <documentation>If the GET request results in null response, call wrapper-specific functions to show debug info. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="deleted" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, we are checking that the data are NOT in the cluster anymore. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="entry-size" type="rg:int" use="required">
               <annotation>
                  <documentation>Number of bytes carried in single entry.</documentation>
               </annotation>
            </attribute>
            <attribute name="extra-entries" type="string">
               <annotation>
                  <documentation>Entries that do not have the expected form but occur in the cluster. This string specifies a polynomial in number of slaves: 1,2,3 with 4 slaves would result in 1 + 2*4 + 3*4*4 = 57 extra entries.Defaults to 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="fail-on-null" type="rg:boolean">
               <annotation>
                  <documentation>If entry is null, fail immediately. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="first-entry-offset" type="rg:long">
               <annotation>
                  <documentation>Index of key of the first entry.</documentation>
               </annotation>
            </attribute>
            <attribute name="first-entry-offset-slave-index" type="rg:long">
               <annotation>
                  <documentation>Index of key of the first entry. This number will be multiplied by slaveIndex. Default is 0. Has precedence over 'first-entry-offset'.</documentation>
               </annotation>
            </attribute>
            <attribute name="ignore-sum" type="rg:boolean">
               <annotation>
                  <documentation>Usually the test checks that sum of local nodes = numOwners * numEntries + extraEntries.This option disables such behaviour. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="live-slaves-hint" type="rg:int">
               <annotation>
                  <documentation>Hint how many slaves are currently alive - if set to &gt; 0 then the query for number of entries in this cache is postponed until the cache appears to be fully replicated. By default this is disabled.</documentation>
               </annotation>
            </attribute>
            <attribute name="log-checks-count" type="rg:int">
               <annotation>
                  <documentation>Number of queries after which a DEBUG log message is printed. Default is 10000.</documentation>
               </annotation>
            </attribute>
            <attribute name="memory-only" type="rg:boolean">
               <annotation>
                  <documentation>If the cache wrapper supports persistent storage and this is set to true, the check will be executed only against in-memory data. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-entries" type="rg:long" use="required">
               <annotation>
                  <documentation>Number of entries with key in form specified by the last used key generator, in the cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="size-only" type="rg:boolean">
               <annotation>
                  <documentation>If true, the entries are not retrieved, this stage only checks that the sum of entries from local nodes is correct. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="step-entry-count" type="rg:long">
               <annotation>
                  <documentation>Number of entries stepped in each step. Default is 1.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-cache-check-stage">
      <annotation>
         <documentation>Parent class for check stages.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-topology-check-topology-stage">
      <annotation>
         <documentation>Controls which topology events have (not) happened recently</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-name" type="string">
                  <annotation>
                     <documentation>Name of the cache. Default is the default cache.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="changed" type="rg:boolean">
                  <annotation>
                     <documentation>The check controls if this event has happened (true) or not happened (false). Defaults to true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-events" type="string">
                  <annotation>
                     <documentation>Type of events to check in this stage. Default are TOPOLOGY, REHASH, CACHE_STATUS (see org.radargun.traits.TopologyHistory.HistoryType).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>The period in milliseconds which is checked. Default is infinite.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="cache-name" type="string">
               <annotation>
                  <documentation>Name of the cache. Default is the default cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="changed" type="rg:boolean">
               <annotation>
                  <documentation>The check controls if this event has happened (true) or not happened (false). Defaults to true.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-events" type="string">
               <annotation>
                  <documentation>Type of events to check in this stage. Default are TOPOLOGY, REHASH, CACHE_STATUS (see org.radargun.traits.TopologyHistory.HistoryType).</documentation>
               </annotation>
            </attribute>
            <attribute name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>The period in milliseconds which is checked. Default is infinite.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-clear-cache-stage">
      <annotation>
         <documentation>Removes all data from the cache</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-name" type="string">
                  <annotation>
                     <documentation>Name of the cache to be cleared. Default is the default cache.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="local" type="rg:java-lang-boolean">
                  <annotation>
                     <documentation>Execute local variant of clear on each slave. Default is null - local clear is performed, only if it is provided by the service. True enforces local clear - if given service does not provide the feature, exception is thrown.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="use-transaction" type="rg:boolean">
                  <annotation>
                     <documentation>Execute the clear inside explicit transaction.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="cache-name" type="string">
               <annotation>
                  <documentation>Name of the cache to be cleared. Default is the default cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="local" type="rg:java-lang-boolean">
               <annotation>
                  <documentation>Execute local variant of clear on each slave. Default is null - local clear is performed, only if it is provided by the service. True enforces local clear - if given service does not provide the feature, exception is thrown.</documentation>
               </annotation>
            </attribute>
            <attribute name="use-transaction" type="rg:boolean">
               <annotation>
                  <documentation>Execute the clear inside explicit transaction.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="java-lang-boolean">
      <union>
         <simpleType>
            <restriction base="boolean"/>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-cluster-validation-stage">
      <annotation>
         <documentation>Verifies that the cluster is formed by injecting an entry into the cache and then reading it from other nodes.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="partial-replication" type="rg:boolean">
                  <annotation>
                     <documentation>If set to true, then the slave will consider that the cluster is formed when one slave replicated the control entry. Otherwise the replication will only be considered successful if all slaves replicated the control value. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="replication-time-sleep" type="rg:int">
                  <annotation>
                     <documentation>Delay between attempts to retrieve the control entry.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="replication-try-count" type="rg:int">
                  <annotation>
                     <documentation>How many times we should try to retrieve the control entry.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="partial-replication" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, then the slave will consider that the cluster is formed when one slave replicated the control entry. Otherwise the replication will only be considered successful if all slaves replicated the control value. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="replication-time-sleep" type="rg:int">
               <annotation>
                  <documentation>Delay between attempts to retrieve the control entry.</documentation>
               </annotation>
            </attribute>
            <attribute name="replication-try-count" type="rg:int">
               <annotation>
                  <documentation>How many times we should try to retrieve the control entry.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-command-stage">
      <annotation>
         <documentation>Stage that allows you to execute generic command on the slave machine.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="args" type="rg:java-util-list-converted-by-org-radargun-utils-args-converter">
                  <annotation>
                     <documentation>Arguments to this command. Default are none</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="exit-values" type="string">
                  <annotation>
                     <documentation>List of exit values that are allowed from the command. Default is {0}.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="args" type="rg:java-util-list-converted-by-org-radargun-utils-args-converter">
               <annotation>
                  <documentation>Arguments to this command. Default are none</documentation>
               </annotation>
            </attribute>
            <attribute name="cmd" type="string" use="required">
               <annotation>
                  <documentation>Command that should be executed.</documentation>
               </annotation>
            </attribute>
            <attribute name="exit-values" type="string">
               <annotation>
                  <documentation>List of exit values that are allowed from the command. Default is {0}.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="java-util-list-converted-by-org-radargun-utils-args-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="(.|&#10;|&#13;)*"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-test-conditional-operations-test-stage">
      <annotation>
         <documentation>Tests (atomic) conditional operations. Note that there is no put-if-absent-ratio- this operation is executed anytime the selected key does not have value.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-test-cache-operations-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="get-and-replace-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET_AND_REPLACE requests. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="match-percentage" type="rg:int">
                  <annotation>
                     <documentation>Percentage of requests in which the condition should be satisfied. Default is 50%.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="remove-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of REMOVE requests. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="replace-any-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of REPLACE_ANY requests. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="replace-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of REPLACE requests. Default is 1.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="get-and-replace-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET_AND_REPLACE requests. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="match-percentage" type="rg:int">
               <annotation>
                  <documentation>Percentage of requests in which the condition should be satisfied. Default is 50%.</documentation>
               </annotation>
            </attribute>
            <attribute name="remove-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of REMOVE requests. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="replace-any-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of REPLACE_ANY requests. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="replace-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of REPLACE requests. Default is 1.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-define-stage">
      <annotation>
         <documentation>Use for setting certain value</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
            <attribute name="value" type="string" use="required">
               <annotation>
                  <documentation>Value of the variable.</documentation>
               </annotation>
            </attribute>
            <attribute name="var" type="string" use="required">
               <annotation>
                  <documentation>Name of the variable that should be set.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-distributedtask-distributed-task-stage">
      <annotation>
         <documentation>Stage which executes a MapReduce Task against all keys in the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="callable-params" type="string">
                  <annotation>
                     <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the callable. The method must be public and take a String parameter. Default is none.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="execution-policy" type="string">
                  <annotation>
                     <documentation>The name of the execution policy. The default is default policy of the service.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="failover-policy" type="string">
                  <annotation>
                     <documentation>The name of the failover policy. The default is default policy of the service.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="node-address" type="string">
                  <annotation>
                     <documentation>The node address where the task will be executed. The default is null, and tasks will be executed against all nodes in the cluster.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-executions" type="rg:int">
                  <annotation>
                     <documentation>The number of times to execute the Callable. The default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="total-bytes-key" type="string">
                  <annotation>
                     <documentation>The name of the key in the MasterState object that returns the total number of bytes processed by the Callable. The default is RandomDataStage.RANDOMDATA_TOTALBYTES_KEY.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="callable" type="string" use="required">
               <annotation>
                  <documentation>Fully qualified class name of the java.util.concurrent.Callable implementation to execute.</documentation>
               </annotation>
            </attribute>
            <attribute name="callable-params" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the callable. The method must be public and take a String parameter. Default is none.</documentation>
               </annotation>
            </attribute>
            <attribute name="execution-policy" type="string">
               <annotation>
                  <documentation>The name of the execution policy. The default is default policy of the service.</documentation>
               </annotation>
            </attribute>
            <attribute name="failover-policy" type="string">
               <annotation>
                  <documentation>The name of the failover policy. The default is default policy of the service.</documentation>
               </annotation>
            </attribute>
            <attribute name="node-address" type="string">
               <annotation>
                  <documentation>The node address where the task will be executed. The default is null, and tasks will be executed against all nodes in the cluster.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-executions" type="rg:int">
               <annotation>
                  <documentation>The number of times to execute the Callable. The default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="total-bytes-key" type="string">
               <annotation>
                  <documentation>The name of the key in the MasterState object that returns the total number of bytes processed by the Callable. The default is RandomDataStage.RANDOMDATA_TOTALBYTES_KEY.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-internal-dist-stage">
      <annotation>
         <documentation>Base for internal stages</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-isolation-level-check-stage">
      <annotation>
         <documentation>Stage for testing guaranties of isolation levels.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-check-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>How long should this stage take. Default is 1 minute.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="readers" type="rg:int">
                  <annotation>
                     <documentation>Number of concurrent threads that try to retrieve the value. Default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="transaction-size" type="rg:int">
                  <annotation>
                     <documentation>Number of reads executed inside on transaction. Default is 30.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="writers" type="rg:int">
                  <annotation>
                     <documentation>Number of concurrent threads that modify the value. Default is 2.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>How long should this stage take. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
            <attribute name="expected-level" type="string" use="required">
               <annotation>
                  <documentation>Expected isolation level (should match to cache configuration). Supported values are [READ_COMMITTED, REPEATABLE_READ].</documentation>
               </annotation>
            </attribute>
            <attribute name="readers" type="rg:int">
               <annotation>
                  <documentation>Number of concurrent threads that try to retrieve the value. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="transaction-size" type="rg:int">
               <annotation>
                  <documentation>Number of reads executed inside on transaction. Default is 30.</documentation>
               </annotation>
            </attribute>
            <attribute name="writers" type="rg:int">
               <annotation>
                  <documentation>Number of concurrent threads that modify the value. Default is 2.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-iteration-iterate-stage">
      <annotation>
         <documentation>Iterates through all entries.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-test-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="container-name" type="string">
                  <annotation>
                     <documentation>Name of the container (e.g. cache, DB table etc.) that should be iterated. Default is the default container.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="converter-class" type="string">
                  <annotation>
                     <documentation>Full class name of the converter. Default is no converter (Map.Entry&lt;K, V&gt; is returned).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="converter-param" type="string">
                  <annotation>
                     <documentation>Parameter for the converter (used to resolve its properties). No defaults.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="fail-on-failed-iteration" type="rg:boolean">
                  <annotation>
                     <documentation>Fail the stage if some of the stressors has failed. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="fail-on-not-total-size" type="rg:java-lang-boolean">
                  <annotation>
                     <documentation>Fail when the number of elements is different than total size. Default is true if filter is not defined and false otherwise.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="fail-on-uneven-elements" type="rg:boolean">
                  <annotation>
                     <documentation>Fail when the number of elements iterated is not same. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="filter-class" type="string">
                  <annotation>
                     <documentation>Full class name of the filter used to iterate through entries. Default is none (accept all).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="filter-param" type="string">
                  <annotation>
                     <documentation>Parameters for the filter (used to resolve its properties). No defaults.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="max-next-failures" type="rg:int">
                  <annotation>
                     <documentation>Number of next() calls that are allowed to fail until we break the loop. Default is 100.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="container-name" type="string">
               <annotation>
                  <documentation>Name of the container (e.g. cache, DB table etc.) that should be iterated. Default is the default container.</documentation>
               </annotation>
            </attribute>
            <attribute name="converter-class" type="string">
               <annotation>
                  <documentation>Full class name of the converter. Default is no converter (Map.Entry&lt;K, V&gt; is returned).</documentation>
               </annotation>
            </attribute>
            <attribute name="converter-param" type="string">
               <annotation>
                  <documentation>Parameter for the converter (used to resolve its properties). No defaults.</documentation>
               </annotation>
            </attribute>
            <attribute name="fail-on-failed-iteration" type="rg:boolean">
               <annotation>
                  <documentation>Fail the stage if some of the stressors has failed. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="fail-on-not-total-size" type="rg:java-lang-boolean">
               <annotation>
                  <documentation>Fail when the number of elements is different than total size. Default is true if filter is not defined and false otherwise.</documentation>
               </annotation>
            </attribute>
            <attribute name="fail-on-uneven-elements" type="rg:boolean">
               <annotation>
                  <documentation>Fail when the number of elements iterated is not same. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="filter-class" type="string">
               <annotation>
                  <documentation>Full class name of the filter used to iterate through entries. Default is none (accept all).</documentation>
               </annotation>
            </attribute>
            <attribute name="filter-param" type="string">
               <annotation>
                  <documentation>Parameters for the filter (used to resolve its properties). No defaults.</documentation>
               </annotation>
            </attribute>
            <attribute name="max-next-failures" type="rg:int">
               <annotation>
                  <documentation>Number of next() calls that are allowed to fail until we break the loop. Default is 100.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-jmx-cluster-validation-prepare-stage">
      <annotation>
         <documentation>Collects configuration for JMXClusterValidationStage.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="jmx-connection-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>JMX Connection timeout. Default is 3 seconds.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="prop1" type="string">
                  <annotation>
                     <documentation>Generic property 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="prop2" type="string">
                  <annotation>
                     <documentation>Generic property 2.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="prop3" type="string">
                  <annotation>
                     <documentation>Generic property 3.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="wait-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Cluster validation timeout. Default is 1 minute.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="jmx-connection-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>JMX Connection timeout. Default is 3 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop1" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop2" type="string">
               <annotation>
                  <documentation>Generic property 2.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop3" type="string">
               <annotation>
                  <documentation>Generic property 3.</documentation>
               </annotation>
            </attribute>
            <attribute name="wait-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Cluster validation timeout. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-jmx-cluster-validation-stage">
      <annotation>
         <documentation>Validates formation of the cluster remotely via JMX.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-master-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="jmx-connection-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>JMX connection timeout. Default is 3 seconds.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="plugin" type="string">
                  <annotation>
                     <documentation>Plugin used for class-loading JMX connector.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="prop1" type="string">
                  <annotation>
                     <documentation>Generic property 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="prop2" type="string">
                  <annotation>
                     <documentation>Generic property 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="prop3" type="string">
                  <annotation>
                     <documentation>Generic property 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="slaves" type="string">
                  <annotation>
                     <documentation>Indices of slaves that should be up. Default is empty.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="wait-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Cluster validation timeout. Default is 1 minute.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="jmx-connection-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>JMX connection timeout. Default is 3 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="plugin" type="string">
               <annotation>
                  <documentation>Plugin used for class-loading JMX connector.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop1" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop2" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="prop3" type="string">
               <annotation>
                  <documentation>Generic property 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="slaves" type="string">
               <annotation>
                  <documentation>Indices of slaves that should be up. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="wait-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Cluster validation timeout. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-jmx-invocation-stage">
      <annotation>
         <documentation>Allows to invoke JMX-exposed methods and attributes.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="continue-on-failure" type="rg:boolean">
                  <annotation>
                     <documentation>Continue method invocations if an exception occurs. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="expected-slave-result" type="rg:org-radargun-utils-primitive-value-converted-by-org-radargun-utils-primitive-value-object-converter">
                  <annotation>
                     <documentation>Expected result value. If specified, results of method invocations are compared with this value.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="expected-total-result" type="rg:org-radargun-utils-primitive-value-converted-by-org-radargun-utils-primitive-value-object-converter">
                  <annotation>
                     <documentation>Expected result, calculated as sum/concatenation (with ',' delimeter) of results from individual slaves.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="method-parameters" type="rg:java-util-list-converted-by-org-radargun-utils-primitive-value-list-converter">
                  <annotation>
                     <documentation>Method parameters. If specified, the number of parameters must match the number of parameter signatures supplied.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="method-signatures" type="string">
                  <annotation>
                     <documentation>Method parameter signatures.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="operation-type" type="rg:org-radargun-stages-jmx-invocation-stage-operation-type">
                  <annotation>
                     <documentation>Type of action to be performed. Invocation of specified method (INVOKE_METHOD) is performed by default. Optionally, query for a specified attribute (via method-parameters) can be performed (GET_ATTRIBUTE_VALUE) or setting a specified attribute (via method-parameters) can be performed(SET_ATTRIBUTE_VALUE).</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="continue-on-failure" type="rg:boolean">
               <annotation>
                  <documentation>Continue method invocations if an exception occurs. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="method-signatures" type="string">
               <annotation>
                  <documentation>Method parameter signatures.</documentation>
               </annotation>
            </attribute>
            <attribute name="operation-type" type="rg:org-radargun-stages-jmx-invocation-stage-operation-type">
               <annotation>
                  <documentation>Type of action to be performed. Invocation of specified method (INVOKE_METHOD) is performed by default. Optionally, query for a specified attribute (via method-parameters) can be performed (GET_ATTRIBUTE_VALUE) or setting a specified attribute (via method-parameters) can be performed(SET_ATTRIBUTE_VALUE).</documentation>
               </annotation>
            </attribute>
            <attribute name="query" type="string" use="required">
               <annotation>
                  <documentation>Method will be invoked on all ObjectInstances matching given query.</documentation>
               </annotation>
            </attribute>
            <attribute name="target-name" type="string" use="required">
               <annotation>
                  <documentation>Name of the method to be invoked / attribute to be queried for.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-primitive-boolean">
      <annotation>
         <documentation>Element representing boolean.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="rg:java-lang-boolean" use="required">
         <annotation>
            <documentation>Value</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-primitive-string">
      <annotation>
         <documentation>Element representing String.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="string" use="required">
         <annotation>
            <documentation>Value</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-primitive-byte">
      <annotation>
         <documentation>Element representing byte.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="string" use="required">
         <annotation>
            <documentation>Value</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-primitive-char">
      <annotation>
         <documentation>Element representing char.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="string" use="required">
         <annotation>
            <documentation>Value</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-primitive-short">
      <annotation>
         <documentation>Element representing short.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="string" use="required">
         <annotation>
            <documentation>Value</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-primitive-integer">
      <annotation>
         <documentation>Element representing int.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="rg:java-lang-integer" use="required">
         <annotation>
            <documentation>Value</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-primitive-long">
      <annotation>
         <documentation>Element representing long.</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="value" type="rg:java-lang-long" use="required">
         <annotation>
            <documentation>Value</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-utils-primitive-value-converted-by-org-radargun-utils-primitive-value-object-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="1" minOccurs="1">
            <element name="boolean" type="rg:org-radargun-utils-primitive-value-primitive-boolean"/>
            <element name="string" type="rg:org-radargun-utils-primitive-value-primitive-string"/>
            <element name="byte" type="rg:org-radargun-utils-primitive-value-primitive-byte"/>
            <element name="char" type="rg:org-radargun-utils-primitive-value-primitive-char"/>
            <element name="short" type="rg:org-radargun-utils-primitive-value-primitive-short"/>
            <element name="int" type="rg:org-radargun-utils-primitive-value-primitive-integer"/>
            <element name="long" type="rg:org-radargun-utils-primitive-value-primitive-long"/>
         </choice>
      </sequence>
   </complexType>
   <complexType name="java-util-list-converted-by-org-radargun-utils-primitive-value-list-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="unbounded" minOccurs="0">
            <element name="boolean" type="rg:org-radargun-utils-primitive-value-primitive-boolean"/>
            <element name="string" type="rg:org-radargun-utils-primitive-value-primitive-string"/>
            <element name="byte" type="rg:org-radargun-utils-primitive-value-primitive-byte"/>
            <element name="char" type="rg:org-radargun-utils-primitive-value-primitive-char"/>
            <element name="short" type="rg:org-radargun-utils-primitive-value-primitive-short"/>
            <element name="int" type="rg:org-radargun-utils-primitive-value-primitive-integer"/>
            <element name="long" type="rg:org-radargun-utils-primitive-value-primitive-long"/>
         </choice>
      </sequence>
   </complexType>
   <simpleType name="org-radargun-stages-jmx-invocation-stage-operation-type">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="INVOKE_METHOD"/>
               <enumeration value="GET_ATTRIBUTE_VALUE"/>
               <enumeration value="SET_ATTRIBUTE_VALUE"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-j-profiler-stage">
      <annotation>
         <documentation>Stage for invoking operations on JProfiler.
Remember to set up JVM args: "-agentpath:/path/to/libjprofilerti.so=offline,id=100,config=/path/to/configuration.xml"</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="reset-cpu-stats" type="rg:boolean">
                  <annotation>
                     <documentation>If true, any previously accumulated CPU profiling data will be discarded. If false, CPU data willbe accumulated across pairs of invocations of START_CPU_RECORDING and STOP_CPU_RECORDING. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="reset-memory-stats" type="rg:boolean">
                  <annotation>
                     <documentation>If true, any previously accumulated Memory profiling data will be discarded. If false, CPU data willbe accumulated across pairs of invocations of START_MEMORY_RECORDING and STOP_MEMORY_RECORDING. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="snapshot-directory" type="string">
                  <annotation>
                     <documentation>Directory where the snapshot should be written (for SAVE_SNAPSHOT).</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="operations" type="string" use="required">
               <annotation>
                  <documentation>Operations that should be invoked on the Controller</documentation>
               </annotation>
            </attribute>
            <attribute name="reset-cpu-stats" type="rg:boolean">
               <annotation>
                  <documentation>If true, any previously accumulated CPU profiling data will be discarded. If false, CPU data willbe accumulated across pairs of invocations of START_CPU_RECORDING and STOP_CPU_RECORDING. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="reset-memory-stats" type="rg:boolean">
               <annotation>
                  <documentation>If true, any previously accumulated Memory profiling data will be discarded. If false, CPU data willbe accumulated across pairs of invocations of START_MEMORY_RECORDING and STOP_MEMORY_RECORDING. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="snapshot-directory" type="string">
               <annotation>
                  <documentation>Directory where the snapshot should be written (for SAVE_SNAPSHOT).</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-test-key-expiration-test-stage">
      <annotation>
         <documentation>During execution, keys expire (entries are removed from the cache) and new keys are used.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-test-cache-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="entry-lifespan" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>With fixedKeys=false, maximum lifespan of an entry. Default is 1 hour.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="expect-lost-keys" type="rg:boolean">
                  <annotation>
                     <documentation>Due to configuration (eviction, expiration), some keys may spuriously disappear. Do not issue a warning for this situation. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="get-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of GET requests. Default is 4.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-bytes-per-thread" type="rg:long-converted-by-org-radargun-utils-size-converter">
                  <annotation>
                     <documentation>Maximum number of bytes in entries' values stored in the cache by one stressor thread at one moment.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-entries-per-thread" type="rg:long">
                  <annotation>
                     <documentation>Maximum number of entries stored in the cache by one stressor thread at one moment.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="put-ratio" type="rg:int">
                  <annotation>
                     <documentation>Ratio of PUT requests. Default is 1.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="entry-lifespan" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>With fixedKeys=false, maximum lifespan of an entry. Default is 1 hour.</documentation>
               </annotation>
            </attribute>
            <attribute name="expect-lost-keys" type="rg:boolean">
               <annotation>
                  <documentation>Due to configuration (eviction, expiration), some keys may spuriously disappear. Do not issue a warning for this situation. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="get-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of GET requests. Default is 4.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-bytes-per-thread" type="rg:long-converted-by-org-radargun-utils-size-converter">
               <annotation>
                  <documentation>Maximum number of bytes in entries' values stored in the cache by one stressor thread at one moment.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-entries-per-thread" type="rg:long">
               <annotation>
                  <documentation>Maximum number of entries stored in the cache by one stressor thread at one moment.</documentation>
               </annotation>
            </attribute>
            <attribute name="put-ratio" type="rg:int">
               <annotation>
                  <documentation>Ratio of PUT requests. Default is 1.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="long-converted-by-org-radargun-utils-size-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="[0-9]+\s*(k[bB]?|M[bB]?|G[bB]?)"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-load-file-stage">
      <annotation>
         <documentation>Loads the contents of a file into the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="bucket" type="string">
                  <annotation>
                     <documentation>The name of the bucket where keys are written. The default is null.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="print-write-statistics" type="rg:boolean">
                  <annotation>
                     <documentation>If true, then the time for each put operation is written to the logs. The default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="string-data" type="rg:boolean">
                  <annotation>
                     <documentation>If true, then String objects are written to the cache. The default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="value-size" type="rg:int">
                  <annotation>
                     <documentation>The size of the values to put into the cache from the contents of the file. The default size is 1MB (1024 * 1024).</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="bucket" type="string">
               <annotation>
                  <documentation>The name of the bucket where keys are written. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="file-path" type="string" use="required">
               <annotation>
                  <documentation>Full pathname to the file.</documentation>
               </annotation>
            </attribute>
            <attribute name="print-write-statistics" type="rg:boolean">
               <annotation>
                  <documentation>If true, then the time for each put operation is written to the logs. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="string-data" type="rg:boolean">
               <annotation>
                  <documentation>If true, then String objects are written to the cache. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="value-size" type="rg:int">
               <annotation>
                  <documentation>The size of the values to put into the cache from the contents of the file. The default size is 1MB (1024 * 1024).</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-mapreduce-map-reduce-stage">
      <annotation>
         <documentation>Stage which executes a MapReduce Task against all keys in the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-name" type="string">
                  <annotation>
                     <documentation>Name of the cache where map-reduce task should beexecuted. Default is the default cache.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="collator-fqn" type="string">
                  <annotation>
                     <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Collator implementation to execute. The default is null.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="collator-params" type="string">
                  <annotation>
                     <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Collator Object. The method must be public and take a String parameter. The default is null.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="combiner-fqn" type="string">
                  <annotation>
                     <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Reducer implementation to use as a combiner.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="combiner-params" type="string">
                  <annotation>
                     <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Reducer Object used as a combiner. The method must be public and take a String parameter. The default is null.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="distribute-reduce-phase" type="rg:boolean">
                  <annotation>
                     <documentation>Boolean value that determines if the Reduce phase of the MapReduceTask is distributed. The default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="mapper-params" type="string">
                  <annotation>
                     <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Mapper Object. The method must be public and take a String parameter. The default is null.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-executions" type="rg:int">
                  <annotation>
                     <documentation>The number of times to execute the Map/Reduce task. The default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="print-result" type="rg:boolean">
                  <annotation>
                     <documentation>Boolean value that determines if the final results of the MapReduceTask are written to the log of the first slave node. The default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="reducer-params" type="string">
                  <annotation>
                     <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Reducer Object. The method must be public and take a String parameter. The default is null.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="store-result-in-cache" type="rg:boolean">
                  <annotation>
                     <documentation>Boolean value that determines if the final results of the MapReduceTask are stored in the cache. The collated object will be stored at key MAPREDUCE_RESULT_KEY. The result map will be stored in a cache named MAPREDUCE_RESULT_KEY. The default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="timeout" type="rg:long">
                  <annotation>
                     <documentation>A timeout value for the remote communication that happens during a Map/Reduce task. The default is zero which means to wait forever.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="total-bytes-key" type="string">
                  <annotation>
                     <documentation>The name of the key in the MasterState object that returns the total number of bytes processed by the Map/Reduce task. The default is RandomDataStage.RANDOMDATA_TOTALBYTES_KEY.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="unit" type="rg:java-util-concurrent-time-unit">
                  <annotation>
                     <documentation>The java.util.concurrent.TimeUnit to use with the timeout property. The default is TimeUnit.MILLISECONDS.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="use-intermediate-shared-cache" type="rg:boolean">
                  <annotation>
                     <documentation>Boolean value that determines if the intermediate results of the MapReduceTask are shared. The default is true.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="cache-name" type="string">
               <annotation>
                  <documentation>Name of the cache where map-reduce task should beexecuted. Default is the default cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="collator-fqn" type="string">
               <annotation>
                  <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Collator implementation to execute. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="collator-params" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Collator Object. The method must be public and take a String parameter. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="combiner-fqn" type="string">
               <annotation>
                  <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Reducer implementation to use as a combiner.</documentation>
               </annotation>
            </attribute>
            <attribute name="combiner-params" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Reducer Object used as a combiner. The method must be public and take a String parameter. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="distribute-reduce-phase" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the Reduce phase of the MapReduceTask is distributed. The default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="mapper-fqn" type="string" use="required">
               <annotation>
                  <documentation>Fully qualified class name of the mapper implementation to execute.</documentation>
               </annotation>
            </attribute>
            <attribute name="mapper-params" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Mapper Object. The method must be public and take a String parameter. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-executions" type="rg:int">
               <annotation>
                  <documentation>The number of times to execute the Map/Reduce task. The default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="print-result" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the final results of the MapReduceTask are written to the log of the first slave node. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="reducer-fqn" type="string" use="required">
               <annotation>
                  <documentation>Fully qualified class name of the org.infinispan.distexec.mapreduce.Reducer implementation to execute.</documentation>
               </annotation>
            </attribute>
            <attribute name="reducer-params" type="string">
               <annotation>
                  <documentation>A String in the form of 'methodName:methodParameter;methodName1:methodParameter1' that allows invoking a method on the Reducer Object. The method must be public and take a String parameter. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="store-result-in-cache" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the final results of the MapReduceTask are stored in the cache. The collated object will be stored at key MAPREDUCE_RESULT_KEY. The result map will be stored in a cache named MAPREDUCE_RESULT_KEY. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="timeout" type="rg:long">
               <annotation>
                  <documentation>A timeout value for the remote communication that happens during a Map/Reduce task. The default is zero which means to wait forever.</documentation>
               </annotation>
            </attribute>
            <attribute name="total-bytes-key" type="string">
               <annotation>
                  <documentation>The name of the key in the MasterState object that returns the total number of bytes processed by the Map/Reduce task. The default is RandomDataStage.RANDOMDATA_TOTALBYTES_KEY.</documentation>
               </annotation>
            </attribute>
            <attribute name="unit" type="rg:java-util-concurrent-time-unit">
               <annotation>
                  <documentation>The java.util.concurrent.TimeUnit to use with the timeout property. The default is TimeUnit.MILLISECONDS.</documentation>
               </annotation>
            </attribute>
            <attribute name="use-intermediate-shared-cache" type="rg:boolean">
               <annotation>
                  <documentation>Boolean value that determines if the intermediate results of the MapReduceTask are shared. The default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="java-util-concurrent-time-unit">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="NANOSECONDS"/>
               <enumeration value="MICROSECONDS"/>
               <enumeration value="MILLISECONDS"/>
               <enumeration value="SECONDS"/>
               <enumeration value="MINUTES"/>
               <enumeration value="HOURS"/>
               <enumeration value="DAYS"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-monitor-start-stage">
      <annotation>
         <documentation>Starts collecting statistics locally on each slave node.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="interface-name" type="string">
                  <annotation>
                     <documentation>Specifies the network interface where statistics are gathered. If not specified, then statistics are not collected.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Period of statistics collection. The default is 1 second.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="interface-name" type="string">
               <annotation>
                  <documentation>Specifies the network interface where statistics are gathered. If not specified, then statistics are not collected.</documentation>
               </annotation>
            </attribute>
            <attribute name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Period of statistics collection. The default is 1 second.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-monitor-stop-stage">
      <annotation>
         <documentation>Stop collecting statistics on each slave node and return collected statistics to the master node.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-lifecycle-parallel-start-stop-stage">
      <annotation>
         <documentation>The stage start and stops some nodes concurrently (without waiting for each other).</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-lifecycle-abstract-service-start-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="graceful" type="rg:boolean">
                  <annotation>
                     <documentation>If set to false, the node crash should be simulated. By default node should be shutdown gracefully.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="reachable" type="string">
                  <annotation>
                     <documentation>Applicable only for cache wrappers with Partitionable feature. Set of slaves that should be reachable from the new node. Default is all slaves.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="start" type="string">
                  <annotation>
                     <documentation>Set of slaves which should be started in this stage. Default is empty.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="start-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Delay before the slaves are started. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stop" type="string">
                  <annotation>
                     <documentation>Set of slaves which should be stopped in this stage. Default is empty.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stop-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Delay before the slaves are stopped. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stop-roles" type="string">
                  <annotation>
                     <documentation>Set of roles which should be stopped in this stage. Default is empty.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="graceful" type="rg:boolean">
               <annotation>
                  <documentation>If set to false, the node crash should be simulated. By default node should be shutdown gracefully.</documentation>
               </annotation>
            </attribute>
            <attribute name="reachable" type="string">
               <annotation>
                  <documentation>Applicable only for cache wrappers with Partitionable feature. Set of slaves that should be reachable from the new node. Default is all slaves.</documentation>
               </annotation>
            </attribute>
            <attribute name="start" type="string">
               <annotation>
                  <documentation>Set of slaves which should be started in this stage. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="start-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Delay before the slaves are started. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="stop" type="string">
               <annotation>
                  <documentation>Set of slaves which should be stopped in this stage. Default is empty.</documentation>
               </annotation>
            </attribute>
            <attribute name="stop-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Delay before the slaves are stopped. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="stop-roles" type="string">
               <annotation>
                  <documentation>Set of roles which should be stopped in this stage. Default is empty.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-periodic-heap-dump-stage">
      <annotation>
         <documentation>Periodically generates heap dumps.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="initial-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Delay before the first heap dump. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>How often should be the heap dumps created. Default is every 30 minutes.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stop" type="rg:boolean">
                  <annotation>
                     <documentation>Set this flag to true in order to terminate the heap dumper. Default is false.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="dir" type="string" use="required">
               <annotation>
                  <documentation>Location on disk where the heap dumps should be stored.</documentation>
               </annotation>
            </attribute>
            <attribute name="initial-delay" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Delay before the first heap dump. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>How often should be the heap dumps created. Default is every 30 minutes.</documentation>
               </annotation>
            </attribute>
            <attribute name="stop" type="rg:boolean">
               <annotation>
                  <documentation>Set this flag to true in order to terminate the heap dumper. Default is false.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-test-query-stage">
      <annotation>
         <documentation>Stage which executes a Query using Infinispan-query API against all keys in the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-test-test-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="check-same-result" type="rg:boolean">
                  <annotation>
                     <documentation>Check whether all slaves got the same result, and fail if not. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="1" name="conditions" type="rg:java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-condition-converter">
                  <annotation>
                     <documentation>Conditions used in the query</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="limit" type="rg:long">
                  <annotation>
                     <documentation>Maximum number of the results. Default is none.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="offset" type="rg:long">
                  <annotation>
                     <documentation>Offset in the results. Default is none.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="order-by" type="rg:java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-sort-converter">
                  <annotation>
                     <documentation>Use sorting order, in form [attribute[:(ASC|DESC)]][,attribute[:(ASC|DESC)]]*. Without specifying ASC or DESC the sort order defaults to ASC. Default is unordereded.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="projection" type="string">
                  <annotation>
                     <documentation>Use projection instead of returning full object. Default is without projection.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="check-same-result" type="rg:boolean">
               <annotation>
                  <documentation>Check whether all slaves got the same result, and fail if not. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="limit" type="rg:long">
               <annotation>
                  <documentation>Maximum number of the results. Default is none.</documentation>
               </annotation>
            </attribute>
            <attribute name="offset" type="rg:long">
               <annotation>
                  <documentation>Offset in the results. Default is none.</documentation>
               </annotation>
            </attribute>
            <attribute name="order-by" type="rg:java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-sort-converter">
               <annotation>
                  <documentation>Use sorting order, in form [attribute[:(ASC|DESC)]][,attribute[:(ASC|DESC)]]*. Without specifying ASC or DESC the sort order defaults to ASC. Default is unordereded.</documentation>
               </annotation>
            </attribute>
            <attribute name="projection" type="string">
               <annotation>
                  <documentation>Use projection instead of returning full object. Default is without projection.</documentation>
               </annotation>
            </attribute>
            <attribute name="query-object-class" type="string" use="required">
               <annotation>
                  <documentation>Full class name of the object that should be queried. Mandatory.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-all">
      <annotation>
         <documentation>All inner conditions are false</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-condition-converter">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-contains">
      <annotation>
         <documentation>Target is collection containing the value</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="rg:java-lang-object-converted-by-org-radargun-utils-object-converter" use="required">
         <annotation>
            <documentation>Value used in the condition</documentation>
         </annotation>
      </attribute>
   </complexType>
   <simpleType name="java-lang-object-converted-by-org-radargun-utils-object-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="string .*|true|false|(int |long |float |double )?(\+|-)?[0-9.]*"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stages-cache-test-query-stage-not">
      <annotation>
         <documentation>All inner conditions are false</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-condition-converter">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-is-null">
      <annotation>
         <documentation>Target is not defined (null)</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-like">
      <annotation>
         <documentation>Target string matches the value</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="string" use="required">
         <annotation>
            <documentation>Value used in the condition</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-lt">
      <annotation>
         <documentation>Target is &lt; than value</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="rg:java-lang-number-converted-by-org-radargun-utils-number-converter" use="required">
         <annotation>
            <documentation>Value used in the condition</documentation>
         </annotation>
      </attribute>
   </complexType>
   <simpleType name="java-lang-number-converted-by-org-radargun-utils-number-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="(int |long |float |double )?(\+|-)?[0-9.]*"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <complexType name="org-radargun-stages-cache-test-query-stage-le">
      <annotation>
         <documentation>Target is &lt;= than value</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="rg:java-lang-number-converted-by-org-radargun-utils-number-converter" use="required">
         <annotation>
            <documentation>Value used in the condition</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-eq">
      <annotation>
         <documentation>Target is equal to value</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="rg:java-lang-object-converted-by-org-radargun-utils-object-converter" use="required">
         <annotation>
            <documentation>Value used in the condition</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-gt">
      <annotation>
         <documentation>Target is &gt; than value</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="rg:java-lang-number-converted-by-org-radargun-utils-number-converter" use="required">
         <annotation>
            <documentation>Value used in the condition</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-any">
      <annotation>
         <documentation>Any of inner conditions is true</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-condition-converter">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-ge">
      <annotation>
         <documentation>Target is &lt; than value</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1"/>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="value" type="rg:java-lang-number-converted-by-org-radargun-utils-number-converter" use="required">
         <annotation>
            <documentation>Value used in the condition</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="org-radargun-stages-cache-test-query-stage-between">
      <annotation>
         <documentation>Target is between two values</documentation>
      </annotation>
      <sequence maxOccurs="1" minOccurs="1">
         <element maxOccurs="1" minOccurs="0" name="lower-inclusive" type="rg:boolean">
            <annotation>
               <documentation>Does the range include the lower-bound? Default is true.</documentation>
            </annotation>
         </element>
         <element maxOccurs="1" minOccurs="0" name="upper-inclusive" type="rg:boolean">
            <annotation>
               <documentation>Does the range include the upper-bound? Default is true.</documentation>
            </annotation>
         </element>
      </sequence>
      <attribute name="lower-bound" type="rg:java-lang-number-converted-by-org-radargun-utils-number-converter" use="required">
         <annotation>
            <documentation>Lower bound for the value</documentation>
         </annotation>
      </attribute>
      <attribute name="lower-inclusive" type="rg:boolean">
         <annotation>
            <documentation>Does the range include the lower-bound? Default is true.</documentation>
         </annotation>
      </attribute>
      <attribute name="path" type="string" use="required">
         <annotation>
            <documentation>Target path (field on the queried object or path through embedded objects)</documentation>
         </annotation>
      </attribute>
      <attribute name="upper-bound" type="rg:java-lang-number-converted-by-org-radargun-utils-number-converter" use="required">
         <annotation>
            <documentation>Upper bound for the value</documentation>
         </annotation>
      </attribute>
      <attribute name="upper-inclusive" type="rg:boolean">
         <annotation>
            <documentation>Does the range include the upper-bound? Default is true.</documentation>
         </annotation>
      </attribute>
   </complexType>
   <complexType name="java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-condition-converter">
      <sequence maxOccurs="1" minOccurs="1">
         <choice maxOccurs="unbounded" minOccurs="0">
            <element name="all" type="rg:org-radargun-stages-cache-test-query-stage-all"/>
            <element name="contains" type="rg:org-radargun-stages-cache-test-query-stage-contains"/>
            <element name="not" type="rg:org-radargun-stages-cache-test-query-stage-not"/>
            <element name="is-null" type="rg:org-radargun-stages-cache-test-query-stage-is-null"/>
            <element name="like" type="rg:org-radargun-stages-cache-test-query-stage-like"/>
            <element name="lt" type="rg:org-radargun-stages-cache-test-query-stage-lt"/>
            <element name="le" type="rg:org-radargun-stages-cache-test-query-stage-le"/>
            <element name="eq" type="rg:org-radargun-stages-cache-test-query-stage-eq"/>
            <element name="gt" type="rg:org-radargun-stages-cache-test-query-stage-gt"/>
            <element name="any" type="rg:org-radargun-stages-cache-test-query-stage-any"/>
            <element name="ge" type="rg:org-radargun-stages-cache-test-query-stage-ge"/>
            <element name="between" type="rg:org-radargun-stages-cache-test-query-stage-between"/>
         </choice>
      </sequence>
   </complexType>
   <simpleType name="java-util-list-converted-by-org-radargun-stages-cache-test-query-stage-sort-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value="[0-9a-zA-Z_]*(:ASC|:DESC)?(,\s*[0-9a-zA-Z_]*(:ASC|:DESC)?)*"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-random-data-stage">
      <annotation>
         <documentation>Generates random data to fill the cache.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="bucket" type="string">
                  <annotation>
                     <documentation>The name of the bucket where keys are written. The default is null.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="limit-word-count" type="rg:boolean">
                  <annotation>
                     <documentation>If true, then the random word generator selects a word from a pre-defined list. The default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="max-sleep-interval" type="rg:int">
                  <annotation>
                     <documentation>The maximum number of seconds to sleep before retrying a failed put command. The default is 5.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="max-word-count" type="rg:int">
                  <annotation>
                     <documentation>The maximum number of words to generate in the pre-defined list of words used with limitWordCount.The default is 100.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="max-word-length" type="rg:int">
                  <annotation>
                     <documentation>The maximum number of characters allowed in a word. The default is 20.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="print-write-statistics" type="rg:boolean">
                  <annotation>
                     <documentation>If true, then the time for each put operation is written to the logs. The default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="put-retry-count" type="rg:int">
                  <annotation>
                     <documentation>The number of times to retry a put if it fails. Default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="ram-percentage" type="rg:double">
                  <annotation>
                     <documentation>A double that represents the percentage of the total Java heap used to determine the amount of data to put into the cache. Either valueCount or ramPercentageDataSize should be specified, but not both.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="random-seed" type="rg:long">
                  <annotation>
                     <documentation>The seed to use for the java.util.Random object. The default is the return value of Calendar.getInstance().getWeekYear().</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="share-words" type="rg:boolean">
                  <annotation>
                     <documentation>If false, then each node in the cluster generates a list of maxWordCount words. If true, then each node in the cluster shares the same list of words. The default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="string-data" type="rg:boolean">
                  <annotation>
                     <documentation>If true, then String objects with printable characters are written to the cache.The default is false</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="target-memory-use" type="rg:long">
                  <annotation>
                     <documentation>The number of bytes to write to the cache when the valueByteOverhead, stringData, and valueSize are taken into account. The code assumes this is an even multiple of valueSize plus valueByteOverhead. If stringData is true, then the code assumes this is an even multiple of (2 * valueSize) plus valueByteOverhead.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="value-byte-overhead" type="rg:int">
                  <annotation>
                     <documentation>The bytes used over the size of the key and value when putting to the cache. By default the stage retrieves the value from cache wrapper automatically.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="value-count" type="rg:long">
                  <annotation>
                     <documentation>The number of values of valueSize to write to the cache. Either valueCount or ramPercentageDataSize should be specified, but not both.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="value-size" type="rg:int">
                  <annotation>
                     <documentation>The size of the values to put into the cache. The default size is 1MB (1024 * 1024).</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="bucket" type="string">
               <annotation>
                  <documentation>The name of the bucket where keys are written. The default is null.</documentation>
               </annotation>
            </attribute>
            <attribute name="limit-word-count" type="rg:boolean">
               <annotation>
                  <documentation>If true, then the random word generator selects a word from a pre-defined list. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="max-sleep-interval" type="rg:int">
               <annotation>
                  <documentation>The maximum number of seconds to sleep before retrying a failed put command. The default is 5.</documentation>
               </annotation>
            </attribute>
            <attribute name="max-word-count" type="rg:int">
               <annotation>
                  <documentation>The maximum number of words to generate in the pre-defined list of words used with limitWordCount.The default is 100.</documentation>
               </annotation>
            </attribute>
            <attribute name="max-word-length" type="rg:int">
               <annotation>
                  <documentation>The maximum number of characters allowed in a word. The default is 20.</documentation>
               </annotation>
            </attribute>
            <attribute name="print-write-statistics" type="rg:boolean">
               <annotation>
                  <documentation>If true, then the time for each put operation is written to the logs. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="put-retry-count" type="rg:int">
               <annotation>
                  <documentation>The number of times to retry a put if it fails. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="ram-percentage" type="rg:double">
               <annotation>
                  <documentation>A double that represents the percentage of the total Java heap used to determine the amount of data to put into the cache. Either valueCount or ramPercentageDataSize should be specified, but not both.</documentation>
               </annotation>
            </attribute>
            <attribute name="random-seed" type="rg:long">
               <annotation>
                  <documentation>The seed to use for the java.util.Random object. The default is the return value of Calendar.getInstance().getWeekYear().</documentation>
               </annotation>
            </attribute>
            <attribute name="share-words" type="rg:boolean">
               <annotation>
                  <documentation>If false, then each node in the cluster generates a list of maxWordCount words. If true, then each node in the cluster shares the same list of words. The default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="string-data" type="rg:boolean">
               <annotation>
                  <documentation>If true, then String objects with printable characters are written to the cache.The default is false</documentation>
               </annotation>
            </attribute>
            <attribute name="target-memory-use" type="rg:long">
               <annotation>
                  <documentation>The number of bytes to write to the cache when the valueByteOverhead, stringData, and valueSize are taken into account. The code assumes this is an even multiple of valueSize plus valueByteOverhead. If stringData is true, then the code assumes this is an even multiple of (2 * valueSize) plus valueByteOverhead.</documentation>
               </annotation>
            </attribute>
            <attribute name="value-byte-overhead" type="rg:int">
               <annotation>
                  <documentation>The bytes used over the size of the key and value when putting to the cache. By default the stage retrieves the value from cache wrapper automatically.</documentation>
               </annotation>
            </attribute>
            <attribute name="value-count" type="rg:long">
               <annotation>
                  <documentation>The number of values of valueSize to write to the cache. Either valueCount or ramPercentageDataSize should be specified, but not both.</documentation>
               </annotation>
            </attribute>
            <attribute name="value-size" type="rg:int">
               <annotation>
                  <documentation>The size of the values to put into the cache. The default size is 1MB (1024 * 1024).</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-listeners-cluster-register-listeners-stage">
      <annotation>
         <documentation>Benchmark operations performance where cluster listenersTrait are enabled or disabled.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="register-listeners" type="rg:boolean">
                  <annotation>
                     <documentation>Before stress stage, cluster listeners would be enabled. This is flag to turn them on. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="reset-stats" type="rg:boolean">
                  <annotation>
                     <documentation>Allows to reset statistics at the begining of the stage. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="sleep-time" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Use sleep time to simulate some work on listener. Default is -1(do not sleep) ms.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="sync" type="rg:boolean">
                  <annotation>
                     <documentation>Setup if cache listener is synchronous/asynchronous. Default is true</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="test-name" type="string">
                  <annotation>
                     <documentation>Name of the test as used for reporting. Default is 'Test'.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="unregister-listeners" type="rg:boolean">
                  <annotation>
                     <documentation>Before stress stage, cluster listeners would be disabled. This is flag to turn them off. Default is false.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="register-listeners" type="rg:boolean">
               <annotation>
                  <documentation>Before stress stage, cluster listeners would be enabled. This is flag to turn them on. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="reset-stats" type="rg:boolean">
               <annotation>
                  <documentation>Allows to reset statistics at the begining of the stage. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="sleep-time" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Use sleep time to simulate some work on listener. Default is -1(do not sleep) ms.</documentation>
               </annotation>
            </attribute>
            <attribute name="sync" type="rg:boolean">
               <annotation>
                  <documentation>Setup if cache listener is synchronous/asynchronous. Default is true</documentation>
               </annotation>
            </attribute>
            <attribute name="test-name" type="string">
               <annotation>
                  <documentation>Name of the test as used for reporting. Default is 'Test'.</documentation>
               </annotation>
            </attribute>
            <attribute name="unregister-listeners" type="rg:boolean">
               <annotation>
                  <documentation>Before stress stage, cluster listeners would be disabled. This is flag to turn them off. Default is false.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-reindex-stage">
      <annotation>
         <documentation>Runs Queryable.reindex()</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="container" type="string">
                  <annotation>
                     <documentation>Container (e.g. cache or DB table) which should be reindex. Default is the default container.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="test" type="string">
                  <annotation>
                     <documentation>Test under which performance of reindexing should be recorded. Default is 'reindex'.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="container" type="string">
               <annotation>
                  <documentation>Container (e.g. cache or DB table) which should be reindex. Default is the default container.</documentation>
               </annotation>
            </attribute>
            <attribute name="test" type="string">
               <annotation>
                  <documentation>Test under which performance of reindexing should be recorded. Default is 'reindex'.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType abstract="true" name="org-radargun-stages-control-repeat-stage">
      <annotation>
         <documentation>Parent class for repeat-related stages.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-internal-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="from" type="rg:int">
                  <annotation>
                     <documentation>Initial counter value. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="inc" type="rg:int">
                  <annotation>
                     <documentation>Counter increment. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="name" type="string">
                  <annotation>
                     <documentation>Repeat name. Default is none.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="times" type="rg:java-lang-integer">
                  <annotation>
                     <documentation>Sets from=0, to=times-1. Default is none.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="to" type="rg:java-lang-integer">
                  <annotation>
                     <documentation>Maximum counter value. Default is none.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="from" type="rg:int">
               <annotation>
                  <documentation>Initial counter value. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="inc" type="rg:int">
               <annotation>
                  <documentation>Counter increment. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="name" type="string">
               <annotation>
                  <documentation>Repeat name. Default is none.</documentation>
               </annotation>
            </attribute>
            <attribute name="times" type="rg:java-lang-integer">
               <annotation>
                  <documentation>Sets from=0, to=times-1. Default is none.</documentation>
               </annotation>
            </attribute>
            <attribute name="to" type="rg:java-lang-integer">
               <annotation>
                  <documentation>Maximum counter value. Default is none.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-control-repeat-begin-stage">
      <annotation>
         <documentation>DO NOT USE DIRECTLY. This stage is added at the beginning of each repeat.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-control-repeat-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-control-repeat-continue-stage">
      <annotation>
         <documentation>DO NOT USE DIRECTLY. This stage is added at the end of each repeat.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-control-repeat-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-control-repeat-end-stage">
      <annotation>
         <documentation>DO NOT USE DIRECTLY. This stage is added at the end of each repeat.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-control-repeat-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-scenario-cleanup-stage">
      <annotation>
         <documentation>DO NOT USE DIRECTLY. This stage is automatically inserted after the last stage in each scenario. You can alter the properties in &amp;lt;cleanup/&amp;gt element.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-internal-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="check-memory" type="rg:boolean">
                  <annotation>
                     <documentation>Specifies whether the check for amount of free memory should be performed. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-memory-released" type="rg:boolean">
                  <annotation>
                     <documentation>Specifies whether the check for amount of free memory should be performed. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-threads" type="rg:boolean">
                  <annotation>
                     <documentation>Specifies whether the check for unfinished threads should be performed. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="heap-dump-dir" type="string">
                  <annotation>
                     <documentation>Directory where the heap dump will be produced if the memory threshold is hit or some threads have not finished. By default the dump will not be produced.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="memory-release-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Timeout for releasing memory through garbage collections. Default is 30 seconds.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="memory-threshold" type="rg:int">
                  <annotation>
                     <documentation>If the available (free) memory after service destroy and System.gc() is below percentage specified in this property the benchmark will fail. Default is 95.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stop-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Timeout for stopped threads to join. Default is 10 seconds.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stop-unfinished-threads" type="rg:boolean">
                  <annotation>
                     <documentation>Calls Thread.stop() on threads that have not finished. Works only if checkThreads=true. Default is true.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="check-memory" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the check for amount of free memory should be performed. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-memory-released" type="rg:boolean">
               <annotation>
                  <documentation>*DEPRECATED* Specifies whether the check for amount of free memory should be performed. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-threads" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the check for unfinished threads should be performed. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="heap-dump-dir" type="string">
               <annotation>
                  <documentation>Directory where the heap dump will be produced if the memory threshold is hit or some threads have not finished. By default the dump will not be produced.</documentation>
               </annotation>
            </attribute>
            <attribute name="memory-release-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Timeout for releasing memory through garbage collections. Default is 30 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="memory-threshold" type="rg:int">
               <annotation>
                  <documentation>If the available (free) memory after service destroy and System.gc() is below percentage specified in this property the benchmark will fail. Default is 95.</documentation>
               </annotation>
            </attribute>
            <attribute name="stop-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Timeout for stopped threads to join. Default is 10 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="stop-unfinished-threads" type="rg:boolean">
               <annotation>
                  <documentation>Calls Thread.stop() on threads that have not finished. Works only if checkThreads=true. Default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-scenario-destroy-stage">
      <annotation>
         <documentation>DO NOT USE DIRECTLY. This stage is automatically inserted after the last stage in each scenario.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-internal-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="graceful-stop-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Timeout for the Lifecycle.stop() execution - if the stop() does not return within this timeout, Killable.kill() is called (if it is supported). Default is 30 seconds.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="graceful-stop-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Timeout for the Lifecycle.stop() execution - if the stop() does not return within this timeout, Killable.kill() is called (if it is supported). Default is 30 seconds.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-scenario-init-stage">
      <annotation>
         <documentation>DO NOT USE DIRECTLY. This stage is automatically inserted before the beginning of scenario.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="heap-dump-dir" type="string">
                  <annotation>
                     <documentation>Directory where the heap dump will be produced. Contrary to scenario-cleanup, if this directory is set, the heap dump is written always. By default the dump will not be produced.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="heap-dump-dir" type="string">
               <annotation>
                  <documentation>Directory where the heap dump will be produced. Contrary to scenario-cleanup, if this directory is set, the heap dump is written always. By default the dump will not be produced.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-lifecycle-service-start-stage">
      <annotation>
         <documentation>Starts services on specified slaves</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-lifecycle-abstract-service-start-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cluster-formation-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Time allowed the cluster to reach `expectNumSlaves` members. Default is 3 minutes.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="delay-after-first-slave-starts" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Delay (staggering) after first slave's start is initiated. Default is 5s.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="delay-between-starting-slaves" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Delay between initiating start of i-th and (i+1)-th slave. Default is 500 ms.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="dump-config" type="rg:boolean">
                  <annotation>
                     <documentation>Collect configuration files and properties for the service, and pass those to reporters. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="expect-num-slaves" type="rg:java-lang-integer">
                  <annotation>
                     <documentation>The number of slaves that should be up after all slaves are started. Applicable only with validateCluster=true. Default is all slaves in the cluster where this stage will be executed (in the same site in case of multi-site configuration).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="reachable" type="string">
                  <annotation>
                     <documentation>Set of slaves that should be reachable to the newly spawned slaves (see Partitionable feature for details). Default is all slaves.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="stagger-slave-startup" type="rg:boolean">
                  <annotation>
                     <documentation>If set to true, the slaves will not be started in one moment but the startup will be delayed. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="validate-cluster" type="rg:boolean">
                  <annotation>
                     <documentation>Specifies whether the cluster formation should be checked after cache wrapper startup. Default is true.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="cluster-formation-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Time allowed the cluster to reach `expectNumSlaves` members. Default is 3 minutes.</documentation>
               </annotation>
            </attribute>
            <attribute name="delay-after-first-slave-starts" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Delay (staggering) after first slave's start is initiated. Default is 5s.</documentation>
               </annotation>
            </attribute>
            <attribute name="delay-between-starting-slaves" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Delay between initiating start of i-th and (i+1)-th slave. Default is 500 ms.</documentation>
               </annotation>
            </attribute>
            <attribute name="dump-config" type="rg:boolean">
               <annotation>
                  <documentation>Collect configuration files and properties for the service, and pass those to reporters. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="expect-num-slaves" type="rg:java-lang-integer">
               <annotation>
                  <documentation>The number of slaves that should be up after all slaves are started. Applicable only with validateCluster=true. Default is all slaves in the cluster where this stage will be executed (in the same site in case of multi-site configuration).</documentation>
               </annotation>
            </attribute>
            <attribute name="reachable" type="string">
               <annotation>
                  <documentation>Set of slaves that should be reachable to the newly spawned slaves (see Partitionable feature for details). Default is all slaves.</documentation>
               </annotation>
            </attribute>
            <attribute name="stagger-slave-startup" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, the slaves will not be started in one moment but the startup will be delayed. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="validate-cluster" type="rg:boolean">
               <annotation>
                  <documentation>Specifies whether the cluster formation should be checked after cache wrapper startup. Default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-lifecycle-service-stop-stage">
      <annotation>
         <documentation>Stops or kills (simulates node crash) one or more nodes.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="async" type="rg:boolean">
                  <annotation>
                     <documentation>If set to true the benchmark will not wait until the node is stopped. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="delay-execution" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>If this value is positive the stage will spawn a thread which will stop the node after the delay. The stage will not wait for anything. By default the stop is immediate and synchronous.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="graceful" type="rg:boolean">
                  <annotation>
                     <documentation>If set to false, the node crash should be simulated. By default node should be shutdown gracefully.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="graceful-stop-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Timeout for the Lifecycle.stop() execution - if the stop() does not return within this timeout, Killable.kill() is called (if it is supported). Default is 2 minutes.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="wait-for-delayed" type="rg:boolean">
                  <annotation>
                     <documentation>If set, the stage will not stop any node but will wait until the delayed execution is finished. Default is false.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="async" type="rg:boolean">
               <annotation>
                  <documentation>If set to true the benchmark will not wait until the node is stopped. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="delay-execution" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>If this value is positive the stage will spawn a thread which will stop the node after the delay. The stage will not wait for anything. By default the stop is immediate and synchronous.</documentation>
               </annotation>
            </attribute>
            <attribute name="graceful" type="rg:boolean">
               <annotation>
                  <documentation>If set to false, the node crash should be simulated. By default node should be shutdown gracefully.</documentation>
               </annotation>
            </attribute>
            <attribute name="graceful-stop-timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Timeout for the Lifecycle.stop() execution - if the stop() does not return within this timeout, Killable.kill() is called (if it is supported). Default is 2 minutes.</documentation>
               </annotation>
            </attribute>
            <attribute name="wait-for-delayed" type="rg:boolean">
               <annotation>
                  <documentation>If set, the stage will not stop any node but will wait until the delayed execution is finished. Default is false.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-set-log-level-stage">
      <annotation>
         <documentation>Debugging stage: changes log priorities</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="pop" type="rg:boolean">
                  <annotation>
                     <documentation>If set to true, instead of setting the priority directly just undo the last priority change. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="priority" type="string">
                  <annotation>
                     <documentation>The new priority that should be used. No defaults.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="package" type="string" use="required">
               <annotation>
                  <documentation>The package or class which should be affected.</documentation>
               </annotation>
            </attribute>
            <attribute name="pop" type="rg:boolean">
               <annotation>
                  <documentation>If set to true, instead of setting the priority directly just undo the last priority change. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="priority" type="string">
               <annotation>
                  <documentation>The new priority that should be used. No defaults.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-topology-set-partitions-stage">
      <annotation>
         <documentation>Partitions the cluster into several parts that cannot communicate.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
            <attribute name="partitions" type="rg:java-util-list-converted-by-org-radargun-stages-topology-set-partitions-stage-unique-checker-converter" use="required">
               <annotation>
                  <documentation>Set of sets of partitions, e.g. [0,1],[2] makes two partitions, one with slaves 0 and 1 and second with slave 2 alone.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="java-util-list-converted-by-org-radargun-stages-topology-set-partitions-stage-unique-checker-converter">
      <union>
         <simpleType>
            <restriction base="string">
               <pattern value=""/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-single-tx-check-stage">
      <annotation>
         <documentation>Paired with SingleTXLoadStage. Checks that the previous stage had the expected result</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="commit-slave" type="string">
                  <annotation>
                     <documentation>Indices of slaves which should have committed the transaction (others rolled back). Default is all committed.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="commit-thread" type="string">
                  <annotation>
                     <documentation>Indices of threads which should have committed the transaction (others rolled back). Default is all committed.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="deleted" type="rg:boolean">
                  <annotation>
                     <documentation>If this is set to true, REMOVE operation should have been executed. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="transaction-size" type="rg:int">
                  <annotation>
                     <documentation>Expected size of the transcation.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="commit-slave" type="string">
               <annotation>
                  <documentation>Indices of slaves which should have committed the transaction (others rolled back). Default is all committed.</documentation>
               </annotation>
            </attribute>
            <attribute name="commit-thread" type="string">
               <annotation>
                  <documentation>Indices of threads which should have committed the transaction (others rolled back). Default is all committed.</documentation>
               </annotation>
            </attribute>
            <attribute name="deleted" type="rg:boolean">
               <annotation>
                  <documentation>If this is set to true, REMOVE operation should have been executed. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="transaction-size" type="rg:int">
               <annotation>
                  <documentation>Expected size of the transcation.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-single-tx-load-stage">
      <annotation>
         <documentation>Performs single transaction with requests on key0 .. keyN in multiple threads on multiple slaves.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="commit-slave" type="string">
                  <annotation>
                     <documentation>Indices of slaves which should commit the transaction (others will rollback). Default is all commit.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="commit-thread" type="string">
                  <annotation>
                     <documentation>Indices of threads which should commit the transaction (others will rollback). Default is all commit.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="delete" type="rg:boolean">
                  <annotation>
                     <documentation>The threads by default do the PUT request, if this is set to true they will do REMOVE. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>The enforced duration of the transaction. If &gt; 0 the threads will sleep for duration/transactionSize after each request. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="threads" type="rg:int">
                  <annotation>
                     <documentation>Number of threads that should execute the transaction. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="transaction-size" type="rg:int">
                  <annotation>
                     <documentation>Number of request in the transaction. Default is 20.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="commit-slave" type="string">
               <annotation>
                  <documentation>Indices of slaves which should commit the transaction (others will rollback). Default is all commit.</documentation>
               </annotation>
            </attribute>
            <attribute name="commit-thread" type="string">
               <annotation>
                  <documentation>Indices of threads which should commit the transaction (others will rollback). Default is all commit.</documentation>
               </annotation>
            </attribute>
            <attribute name="delete" type="rg:boolean">
               <annotation>
                  <documentation>The threads by default do the PUT request, if this is set to true they will do REMOVE. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>The enforced duration of the transaction. If &gt; 0 the threads will sleep for duration/transactionSize after each request. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="threads" type="rg:int">
               <annotation>
                  <documentation>Number of threads that should execute the transaction. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="transaction-size" type="rg:int">
               <annotation>
                  <documentation>Number of request in the transaction. Default is 20.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-sleep-stage">
      <annotation>
         <documentation>Sleeps specified number of milliseconds.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-master-stage">
            <sequence maxOccurs="1" minOccurs="1"/>
            <attribute name="time" type="rg:long-converted-by-org-radargun-utils-time-converter" use="required">
               <annotation>
                  <documentation>Sleep duration.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-monitor-stack-trace-watchdog-stage">
      <annotation>
         <documentation>Debug usage only. Periodically check for all thread stack traces and print them out.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="async-logging" type="rg:boolean">
                  <annotation>
                     <documentation>If set to true the watchdog will not use standard logging for output but will push the output to queue consumed (logged) by another thread. Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="mask" type="string">
                  <annotation>
                     <documentation>If set, only those threads which have this mask in the name will be checked. Default is not set.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="only-stuck" type="rg:boolean">
                  <annotation>
                     <documentation>By default the check will print out only those threads which appear to be stuck. If this is set to false all threads will be printed out. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>The delay between consecutive checks. Default is 10 seconds.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="short-stack" type="rg:int">
                  <annotation>
                     <documentation>Threads with stack lower or equal to this value are never printed (because usually such threads are parked in thread pools). Default is 10.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="async-logging" type="rg:boolean">
               <annotation>
                  <documentation>If set to true the watchdog will not use standard logging for output but will push the output to queue consumed (logged) by another thread. Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="mask" type="string">
               <annotation>
                  <documentation>If set, only those threads which have this mask in the name will be checked. Default is not set.</documentation>
               </annotation>
            </attribute>
            <attribute name="only-stuck" type="rg:boolean">
               <annotation>
                  <documentation>By default the check will print out only those threads which appear to be stuck. If this is set to false all threads will be printed out. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>The delay between consecutive checks. Default is 10 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="short-stack" type="rg:int">
               <annotation>
                  <documentation>Threads with stack lower or equal to this value are never printed (because usually such threads are parked in thread pools). Default is 10.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-tpcc-tpcc-benchmark-stage">
      <annotation>
         <documentation>Simulate the activities found in complex OLTP application environments.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="arrival-rate" type="rg:double">
                  <annotation>
                     <documentation>Average arrival rate of the transactions to the system. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-threads" type="rg:int">
                  <annotation>
                     <documentation>Number of threads that will work on this slave. Default is 10.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="order-status-weight" type="rg:double">
                  <annotation>
                     <documentation>Percentage of Order Status transactions. Default is 5 %.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="payment-weight" type="rg:double">
                  <annotation>
                     <documentation>Percentage of Payment transactions. Default is 45 %.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="per-thread-simul-time" type="rg:long">
                  <annotation>
                     <documentation>Total time (in seconds) of simulation for each stressor thread. Default is 180.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="arrival-rate" type="rg:double">
               <annotation>
                  <documentation>Average arrival rate of the transactions to the system. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-threads" type="rg:int">
               <annotation>
                  <documentation>Number of threads that will work on this slave. Default is 10.</documentation>
               </annotation>
            </attribute>
            <attribute name="order-status-weight" type="rg:double">
               <annotation>
                  <documentation>Percentage of Order Status transactions. Default is 5 %.</documentation>
               </annotation>
            </attribute>
            <attribute name="payment-weight" type="rg:double">
               <annotation>
                  <documentation>Percentage of Payment transactions. Default is 45 %.</documentation>
               </annotation>
            </attribute>
            <attribute name="per-thread-simul-time" type="rg:long">
               <annotation>
                  <documentation>Total time (in seconds) of simulation for each stressor thread. Default is 180.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-tpcc-tpcc-population-stage">
      <annotation>
         <documentation>This stage shuld be run before the TpccBenchmarkStage.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="c-id-mask" type="rg:long">
                  <annotation>
                     <documentation>Mask used to generate non-uniformly distributed random customer numbers. Default is 1023.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="c-last-mask" type="rg:long">
                  <annotation>
                     <documentation>Mask used to generate non-uniformly distributed random customer last names. Default is 255.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="num-warehouses" type="rg:int">
                  <annotation>
                     <documentation>Number of Warehouses. Default is 1.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="ol-id-mask" type="rg:long">
                  <annotation>
                     <documentation>Mask used to generate non-uniformly distributed random item numbers. Default is 8191.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="c-id-mask" type="rg:long">
               <annotation>
                  <documentation>Mask used to generate non-uniformly distributed random customer numbers. Default is 1023.</documentation>
               </annotation>
            </attribute>
            <attribute name="c-last-mask" type="rg:long">
               <annotation>
                  <documentation>Mask used to generate non-uniformly distributed random customer last names. Default is 255.</documentation>
               </annotation>
            </attribute>
            <attribute name="num-warehouses" type="rg:int">
               <annotation>
                  <documentation>Number of Warehouses. Default is 1.</documentation>
               </annotation>
            </attribute>
            <attribute name="ol-id-mask" type="rg:long">
               <annotation>
                  <documentation>Mask used to generate non-uniformly distributed random item numbers. Default is 8191.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-topology-wait-for-topology-event-stage">
      <annotation>
         <documentation>Waits until some event occurs. Note that the initial rehash is not recorded in this manner, therefore waiting for that will result in timeout.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-name" type="string">
                  <annotation>
                     <documentation>Name of the cache where we detect the events. Default is the default cache.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="condition" type="rg:org-radargun-traits-topology-history-event-event-type">
                  <annotation>
                     <documentation>Condition we are waiting for. Default is END (see org.radargun.traits.TopologyHistory.Event.EventType).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="max-members" type="rg:int">
                  <annotation>
                     <documentation>The maximum number of slaves that participated in this event. Default is indefinite.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="min-members" type="rg:int">
                  <annotation>
                     <documentation>The minimum number of slaves that participated in this event. Default is 0.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="set" type="rg:boolean">
                  <annotation>
                     <documentation>Set last state before finishing. Default is true.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>How long should we wait until we give up with error, 0 means indefinitely. Default is 10 minutes.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="type" type="rg:org-radargun-traits-topology-history-history-type">
                  <annotation>
                     <documentation>Type of event we are detecting. Default is REHASH (see org.radargun.traits.TopologyHistory.HistoryType).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="wait" type="rg:boolean">
                  <annotation>
                     <documentation>Wait for the event to happen. Default is true.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="cache-name" type="string">
               <annotation>
                  <documentation>Name of the cache where we detect the events. Default is the default cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="condition" type="rg:org-radargun-traits-topology-history-event-event-type">
               <annotation>
                  <documentation>Condition we are waiting for. Default is END (see org.radargun.traits.TopologyHistory.Event.EventType).</documentation>
               </annotation>
            </attribute>
            <attribute name="max-members" type="rg:int">
               <annotation>
                  <documentation>The maximum number of slaves that participated in this event. Default is indefinite.</documentation>
               </annotation>
            </attribute>
            <attribute name="min-members" type="rg:int">
               <annotation>
                  <documentation>The minimum number of slaves that participated in this event. Default is 0.</documentation>
               </annotation>
            </attribute>
            <attribute name="set" type="rg:boolean">
               <annotation>
                  <documentation>Set last state before finishing. Default is true.</documentation>
               </annotation>
            </attribute>
            <attribute name="timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>How long should we wait until we give up with error, 0 means indefinitely. Default is 10 minutes.</documentation>
               </annotation>
            </attribute>
            <attribute name="type" type="rg:org-radargun-traits-topology-history-history-type">
               <annotation>
                  <documentation>Type of event we are detecting. Default is REHASH (see org.radargun.traits.TopologyHistory.HistoryType).</documentation>
               </annotation>
            </attribute>
            <attribute name="wait" type="rg:boolean">
               <annotation>
                  <documentation>Wait for the event to happen. Default is true.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <simpleType name="org-radargun-traits-topology-history-event-event-type">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="START"/>
               <enumeration value="END"/>
               <enumeration value="SINGLE"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <simpleType name="org-radargun-traits-topology-history-history-type">
      <union>
         <simpleType>
            <restriction base="string">
               <enumeration value="TOPOLOGY"/>
               <enumeration value="REHASH"/>
               <enumeration value="CACHE_STATUS"/>
            </restriction>
         </simpleType>
         <simpleType>
            <restriction base="string">
               <pattern value="[$#]\{.*\}"/>
            </restriction>
         </simpleType>
      </union>
   </simpleType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-topology-wait-for-topology-settle-stage">
      <annotation>
         <documentation>Waits for a period without any change in membership/topology history.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-abstract-dist-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="cache-name" type="string">
                  <annotation>
                     <documentation>Name of the cache where we detect the events. Default is the default cache.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-events" type="string">
                  <annotation>
                     <documentation>Type of events to check in this stage. Default are TOPOLOGY, REHASH, CACHE_STATUS (see org.radargun.traits.TopologyHistory.HistoryType).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="check-membership" type="rg:boolean">
                  <annotation>
                     <documentation>Wait for cluster membership to settle. Default is true (if the Clustered trait is supported).</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>How long period without any change are we looking for. Default is 10 seconds.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>How long should we wait until we give up with error, 0 means indefinitely. Default is 10 minutes.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="cache-name" type="string">
               <annotation>
                  <documentation>Name of the cache where we detect the events. Default is the default cache.</documentation>
               </annotation>
            </attribute>
            <attribute name="check-events" type="string">
               <annotation>
                  <documentation>Type of events to check in this stage. Default are TOPOLOGY, REHASH, CACHE_STATUS (see org.radargun.traits.TopologyHistory.HistoryType).</documentation>
               </annotation>
            </attribute>
            <attribute name="check-membership" type="rg:boolean">
               <annotation>
                  <documentation>Wait for cluster membership to settle. Default is true (if the Clustered trait is supported).</documentation>
               </annotation>
            </attribute>
            <attribute name="period" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>How long period without any change are we looking for. Default is 10 seconds.</documentation>
               </annotation>
            </attribute>
            <attribute name="timeout" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>How long should we wait until we give up with error, 0 means indefinitely. Default is 10 minutes.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-write-skew-check-stage">
      <annotation>
         <documentation>Stage checking the write skew detection in transactional caches.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-check-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
                  <annotation>
                     <documentation>Duration of the test. Default is 1 minute.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="test-null" type="rg:boolean">
                  <annotation>
                     <documentation>Should write skew between null value and first value be tested? Default is false.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="threads" type="rg:int">
                  <annotation>
                     <documentation>Number of threads overwriting concurrently the entry. Default is 10.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="duration" type="rg:long-converted-by-org-radargun-utils-time-converter">
               <annotation>
                  <documentation>Duration of the test. Default is 1 minute.</documentation>
               </annotation>
            </attribute>
            <attribute name="test-null" type="rg:boolean">
               <annotation>
                  <documentation>Should write skew between null value and first value be tested? Default is false.</documentation>
               </annotation>
            </attribute>
            <attribute name="threads" type="rg:int">
               <annotation>
                  <documentation>Number of threads overwriting concurrently the entry. Default is 10.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
   <!--From radargun-core-2.1.0.Final.jar-->
   <complexType name="org-radargun-stages-cache-xs-repl-check-stage">
      <annotation>
         <documentation>Checks loaded data for validity. Useful for testing cross-site replication.</documentation>
      </annotation>
      <complexContent>
         <extension base="rg:org-radargun-stages-cache-check-cache-data-stage">
            <sequence maxOccurs="1" minOccurs="1">
               <element maxOccurs="1" minOccurs="0" name="backup-caches" type="string">
                  <annotation>
                     <documentation>Comma-separated list of all backup caches to be checked. Ignored if backup-value-generator is not specified.</documentation>
                  </annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="backup-value-generator" type="rg:org-radargun-stages-cache-generators-value-generator-converted-by-org-radargun-stages-cache-generators-value-generator-complex-converter">
                  <annotation>
                     <documentation>Backup value generator. By default, only main (default) cache is checked. If specified, backup caches will be checked too.</documentation>
                  </annotation>
               </element>
            </sequence>
            <attribute name="backup-caches" type="string">
               <annotation>
                  <documentation>Comma-separated list of all backup caches to be checked. Ignored if backup-value-generator is not specified.</documentation>
               </annotation>
            </attribute>
         </extension>
      </complexContent>
   </complexType>
</schema>
